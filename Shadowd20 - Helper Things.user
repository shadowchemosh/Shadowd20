<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <fileinfo>
    <info_author>Tim Shadow
      Email: ShadowChemosh@yahoo.com

      This is a houserules file for a group of gamers in Romeoville, IL.  To see the changes vist our wiki at http://shadowd20.pbworks.com/PRPG</info_author>
    <info_history><![CDATA[]]></info_history>
    </fileinfo>

  <thing id="mecS20" name="Shadow d20 Mechanic" description="Shadow d20 Potions &amp; Scrolls\nShadow d20 Wondrous Items\nShadow d20 Rods\nShadow d20 Rogue Skill Tricks\nShadow d20 Teamwork feats\nShadow d20 Fix X-bows\nShadow d20 Two-Handed Weapons\nShadow d20 Casting Time change\nShadow d20 Spell bonus damage\nShadow d20 Mythic Text Changes\n\n--Tags--\nwRangeInc.250 - 250ft range increment tag" compset="Mechanics">
    <usesource source="pShadowd20"/>
    <tag group="wRangeInc"  tag="250"/>
    <tag group="ProductId"  tag="Shadowd20"  name="Shadow d20"/>
    <tag group="Usage"      tag="S2Encount"  name="/encounter"/>
    <tag group="abCategory" tag="S2Warlock"  name="Warlock Hex" abbrev="Hex"/>
    <tag group="abCategory" tag="S2WolfFaSt" name="Barbarian(Wolf Fang Strike Totem)" abbrev="Wolf Fang Strike"/>
    <tag group="abCategory" tag="S2RogSkTr"  name="Rogue Skill Trick"/>

    <!-- Combat and weapons -->
    <bootstrap thing="S2TwoHand"></bootstrap>  <!-- Power Attack and 2H weapons don't get 1.5x Str until level 6 -->
    <bootstrap thing="s20SpellCo"></bootstrap> <!-- TWF for Magus and Touch Attack weapon -->
    <bootstrap thing="s20TWF"></bootstrap>     <!-- TWF no longer gives -2 to hit -->

    <!-- Make these items put in a Item ID Text -->
    <bootstrap thing="s20Potions"></bootstrap>
    <bootstrap thing="s20Rods"></bootstrap>
    <bootstrap thing="s20Wondrou"></bootstrap>

    <!-- Misc Changes -->
    <bootstrap thing="s20ActPoin"></bootstrap> <!-- NPCs Action Points are zero -->
    <bootstrap thing="s20SkillPo"></bootstrap> <!-- Specific classes get bonus skill points -->
    <bootstrap thing="s20MiscTxt"></bootstrap> <!-- Update Things with Shadow d20 house rule notes -->
    <bootstrap thing="s20MythTxt"></bootstrap> <!-- Update Mythic Things with Shadow d20 house rule notes -->
    <bootstrap thing="s20UAETxt"></bootstrap>  <!-- Update Text for Unchained Action Economy -->
    
    <!-- Removed this for now as its costing a HIGH amount of CPU and no one still takes
         any team work feats. -->
    <!-- <bootstrap thing="S20Teamwor"></bootstrap>  House rule note for Team Work feats  -->

    <!-- Spell Casting -->
    <bootstrap thing="s20CastTim"></bootstrap> <!-- 1 round spells are Full-Round spells -->
    <bootstrap thing="s20SpelDmg"></bootstrap> <!-- Give Spells bonus damage --> 
    <bootstrap thing="s20DblSpls"></bootstrap> <!-- Double 9 level arcane spells per day --> 
    <bootstrap thing="s20DblSFDC"></bootstrap> <!-- Double DC bonus for Spell Focus and Greater Spell Focus --> 

    <!-- Rogue Class Changes -->
    <bootstrap thing="s20Rogue"></bootstrap>   <!-- Rogue class gets Skill Tricks. Unchained does NOT. -->
    <bootstrap thing="s20Rogue2"></bootstrap>  <!-- Rogue and Unchained Rogue Talents are usuable per encounter not day -->

    <!-- This gives an option where XP is not needed -->
    <bootstrap thing="s20NoXP"></bootstrap>

    <!-- Archetype Class Changes for the Unchained Rogue -->
    <bootstrap thing="s20RogueUn"></bootstrap>
   
    <eval phase="First" priority="10000">~ If not human get out now
      ~#hasrace[rHuman] + #hasrace[rElf] + #hasrace[rDwarf] +
      doneif (#hasrace[rHalfling] = 0)

      Call GiveEthnic</eval>
    </thing>

  <!-- 22 Point Buy Option -->
  <thing id="creaMedium" name="Medium Fantasy" compset="Creation">
    <fieldval field="creaName" value="Point Buy: Shadow d20, 22"/>
    <fieldval field="creaAttPts" value="22"/>
    <usesource source="s20PFCamp"/>
    <tag group="explicit" tag="70" name="70" abbrev="70"/>
    </thing>

  <!-- ======================================================================================= -->
  <!-- Let players type in Unique ID's for items.                                              -->
  <!-- ======================================================================================= -->
  <thing id="s20Potions" name="Shadow d20 Potions, Scrolls, and Wands" 
    description="Change all potions, scrolls, and Wand on a character to have to have a Custom Text entry." 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="srcPotID"/>
    <eval phase="First"><![CDATA[
      ~ If we are a NPC then don't require ID for magic items
      doneif (hero.tagis[CharType.typNPC] = 1) 

      foreach pick in hero from MyGear where "gType.OilPotion|gType.Scroll|gType.Wand & !Shadowd20.SkipDomain"
         perform eachpick.assign[User.NeedDomain]
      nexteach]]></eval>
    </thing>

  <thing id="s20Wondrou" name="Shadow d20 Wondrous Items" 
    description="Change all wondrous items on a character to have to have a Custom Text entry." 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="Final"><![CDATA[
      ~ If we are a NPC then don't require ID for magic items
      doneif (hero.tagis[CharType.typNPC] = 1) 

      ~ All Wondrous items EXCEPT for the Shadow d20 -Custom Magic Item-
      foreach pick in hero from MyGear where "(gType.Wonder|gType.Ring) & !thingid.ioS2Custom & !Shadowd20.SkipDomain"
         perform eachpick.assign[User.NeedDomain]
      nexteach]]></eval>
    </thing>

  <thing id="s20Rods" name="Shadow d20 Rods" 
    description="Change all rod items on a character to have to have a Custom Text entry." 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="First"><![CDATA[
      ~ If we are a NPC then don't require ID for magic items
      doneif (hero.tagis[CharType.typNPC] = 1) 

      ~ All Rods
      foreach pick in hero from MyGear where "gType.Rod & !Shadowd20.SkipDomain"
         perform eachpick.assign[User.NeedDomain]
      nexteach]]></eval>
    </thing>



  <!-- ======================================================================================= -->
  <!-- Rogue Class Fixes                                                                       -->
  <!-- ======================================================================================= -->
  <thing id="s20Rogue" name="Shadow d20 Rogue Skill Tricks" description="Give rogue Skill Tricks starting at level 1. Also change any rogue talents from 1/day to 1/encounter" compset="Simple" uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ Done if no rogue class found
      if (hero.childlives[cHelpRog] = 1) then
        ~ Give 1 point to the Secondary Class Abilities total
        hero.child[cHelpRog].field[cGiveSp2nd].value += maximum(round(#levelcount[Rogue]/2,0,1),1)
      endif  

      ~ Change all the rogue talents to per encounter instead per day
      foreach pick in hero from BaseCustSp where "Usage.Day & abCategory.RogTal?"
        perform eachpick.delete[Usage.?]
        perform eachpick.assign[Usage.S2Encount]
      nexteach
      ]]></eval>
    <eval phase="Render" priority="100000" index="2"><![CDATA[
      ~ Done if no rogue class found
      doneif (hero.childlives[cHelpRog] = 0)

      ~ Give name of Skill Tricks
      hero.child[cHelpRog].field[cSpec2ndNm].text = "Skill Tricks"
      hero.child[cHelpRog].field[cSpec2ndSi].text = "Skill Trick"]]></eval>
    </thing>

  <thing id="s20Rogue2" name="Shadow d20 Rogue 1/day to 1/Encounter TEXT addition" description="All one time a day rogue abilities are being changed to 1/day." compset="Simple" uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="Render" priority="200"><![CDATA[
      ~ Set text fields
      var sText   as string
      var sChange as string

      sChange = "{b}Shadow d20:{/b} Rogue talents usable 1/day are changed to 1/encounter. Final say of a encounter definition is left in the hands of the DM. It takes 1 minute after the encounter to recover this talent."

      foreach thing in BaseCustSp where "Usage.Day & abCategory.RogTal?"
        ~ Build text string
        sText = eachthing.field[descript].text & "{br}{br}" & sChange
        ~ Set message
        perform eachthing.amendthing[description,sText]  
      nexteach]]></eval>
    </thing>


  <!-- ======================================================================================= -->
  <!-- Some classes need more skill points                                                     -->
  <!-- ======================================================================================= -->
  <thing id="s20SkillPo" name="Shadow d20 Increase Class Skill Points" 
    description="Give an increase to some class skill points.\n\n-Clerics increased by 2 per level." 
    compset="Simple">
    <usesource source="pShadowd20"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ Check to see if we have the cleric class
      If (hero.childlives[cHelpClr] <> 0) Then
         ~ Clerics skill points increased by 2 per level
         hero.child[cHelpClr].field[cSkills].value += 2
      Endif]]></eval>
    </thing>


  <!-- ======================================================================================= -->
  <!-- Fixes for teamwork feats                                                                -->
  <!-- ======================================================================================= -->
  <thing id="S20Teamwor" name="Shadow d20 Teamwork Feats" description="Add extra house rules text to all teamwork feats.  Most of the teamwork feats we are allowing them to be used within 30ft of each other." compset="Simple" uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="Render" priority="200"><![CDATA[
      ~ Set text fields
      var sTxt30 as string
      var sTxt10 as string
      var sText  as string

      sTxt30 = "{b}Shadow d20:{/b} This teamwork feat can be used within 30ft now."
      sTxt10 = "{b}Shadow d20:{/b} This Teamwork feat can be used within 10ft now."

      foreach thing in BaseFeat where "fCategory.Teamwork"
        ~ For some team work the distance is 10ft not 30ft
        If (eachthing.tagsearch["thingid.fAmpRage|thingid.fDuckCover|thingid.fShakeIt"] <> 0) Then
          sText = eachthing.field[descript].text & "{br}{br}" & sTxt10
        ~.. otherwise assume we need the 30ft text
        Else 
          sText = eachthing.field[descript].text & "{br}{br}" & sTxt30
        Endif
        ~ Set message
        perform eachthing.amendthing[description,sText]  
      nexteach]]></eval>
    </thing>

  <!-- ============================================================================================= -->
  <!-- Two-Handed Weapons                                                                            -->
  <!-- ============================================================================================= -->
  <thing id="S2TwoHand" name="Shadow d20 Two-Handed Weapons" compset="Simple" uniqueness="useronce">
    <usesource source="srcTHW"/>
    <usesource source="srcTHW2"/>
    <eval phase="PostAttr" priority="200000"><![CDATA[
      if (hero.tagis[source.srcTHW] = 1) then
        ~ If level is 6 or greater then get out now
        doneif (#totallevelcount[] >= 6)
      endif

      ~ Under the Unchained Action Economy we don't want to use this rule
      doneif (hero.tagis[source.PURevActi] = 1)

      var penalty as number
      var nPower  as number

      ~ Set houserule text on Power Attack
      #appenddesc[fPowerAtt,"{b}Shadow d20:{/b} Two-handed weapons will NO longer get 1.5x Strength damage or get +50% bonus when using Power Attack until your character is level 6."]

      ~ If we have power attack feat then process here
      If (hero.childlives[fPowerAtt] <> 0) Then
        ~ If Power Attack is turned on then we need to off-set +50%
        ~ bonus PA applies.
        If (hero.child[fPowerAtt].field[abilActive].value <> 0) Then
            nPower = #value[fPowerAtt]
        Endif
      Endif

      ~ Loop through only the melee weapons
      foreach pick in hero from BaseWep where "wCategory.Melee"
        ~ Calculate the Bonus of 1.5
        penalty = round(eachpick.field[wMeleeAttr].value/2,0,-1) + nPower
        ~ make our value negative
        penalty *= -1

        ~ Are we a natural attack
        If (eachpick.tagis[wGroup.Natural] <> 0) Then
          ~ And we are a PC then remove the two-handed tag
          If (hero.tagis[CharType.typHero] <> 0) Then
            perform eachpick.delete[Helper.NatTwoHand]
          Endif

        ~...we are a one handed weapon equipped in two hands
        ElseIf (eachpick.tagis[wClass.OneHanded] + eachpick.field[gIsEquip].value + eachpick.field[wIs2nd].value = 3) Then
          ~ Give a penalty
          eachpick.field[wDamBonus].value += penalty

        ~...we are a Double weapon
        ElseIf (eachpick.tagis[wCategory.Double] <> 0) Then
          ~ If we are double weapon and we are equipped in double mode
          ~ then do NOT give penalty as we are treated as a one-handed weapon
          If (eachpick.field[wIsDouble].value <> 1) Then
            eachpick.field[wDamBonus].value += penalty
          Endif

        ~...we are a two-handed weapon
        ElseIf (eachpick.tagis[wClass.TwoHanded] <> 0) Then
          ~ Give a penalty to offset the 1.5 Str damage
          eachpick.field[wDamBonus].value += penalty
        Endif

      nexteach
      ]]></eval>
    </thing>

  <!-- ======================================================================================= -->
  <!-- Action Points                                                                           -->
  <!-- ======================================================================================= -->
  <thing id="s20ActPoin" name="Shadow d20 Action Points" 
    description="This sets the action points for NPCs to be zero." 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="PostLevel" priority="10010"><![CDATA[
      ~ If we are not a NPC then get out now
      doneif (hero.tagis[CharType.typNPC] = 0)
      ~ If action points tracker not live get out now
      doneif (hero.childlives[hActionPts] <> 1)

      ~ Set action points to zero if we are a NPC
      #trkmax[hActionPts] = 0

      #appenddesc[hActionPts,"{b}Shadow d20:{/b} NPCs do not gain any APs unless they take the Heroic Spirit feat"]
      ]]></eval>
    </thing>


  <thing id="s20SpellCo" name="Shadow d20 Magus Spell-Combat" 
    description="Correctly has HL calculate the TWF values of a Magus with a weapon and &quot;Touch Attack&quot;." 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If Magus Spell-Combat not live
      doneif (hero.childlives[cMagSplCom] <> 1)
      ~ Make sure we have not been replaced first
      doneif (hero.child[cMagSplCom].tagis[Helper.SpcReplace] <> 0)
      ~ Make sure we don't have two-weapon fighting already
      doneif (hero.tagis[Hero.TwoWep] = 1)

      var Hands as number
      var Touch as number
      Hands = 0
      Touch = 0

      ~ Are we duel wielding?
      Hands = tagexpr[(count:hero#Hero.EquipWep = 2) | hero#Hero.EquipDbl]
      ~ Is Touch attack equipped?
      Touch = hero.tagis[PackHelper.EquipTouch]

      ~ If not duel wielding with a touch attack weapon then get out!
      doneif (Hands + Touch = 2)
      
      ~ Make us act like we have two-weapon fighting
      foreach pick in hero from BaseWep where "Hero.MainHand | Hero.OffHand"
         If (eachpick.tagis[Hero.MainHand] <> 0) Then
             eachpick.field[wAttMelee].value += 2
         Endif
         If (eachpick.tagis[Hero.OffHand] <> 0) Then
             eachpick.field[wAttMelee].value += 6
             eachpick.field[wAttRanged].value += 6
         Endif
      nexteach
      ]]></eval>
    </thing>


  <thing id="s20TWF" name="Shadow d20 Two-Weapon Fighting" 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="srcTWF"/>

    <eval phase="PreLevel" priority="10050" index="1"><![CDATA[
      ~ Give note on the feat
      #appenddesc[fTwoWep,"{b}Shadow d20:{/b} TWF now offsets the penalty down to zero instead of -2 but you lose this bonus if you take the Improved Two-Weapon fighting feat or TWF with a two-handed weapon."]

      ~ If we don't have the Two-Weapon Fighting get out now
      doneif (hero.tagis[Hero.TwoWep] <> 1)
      ~ If we have Improved Two-Weapon Fighting get out now
      doneif (#hasfeat[fImpTwoWep] <> 0)
      ~ If we have a two-handed weapon then we don't get the bonus
      doneif (hero.tagcount[Hero.EquipOff] >= 2)
      ~ Under the Unchained Action Economy we don't want to lower the TWF penalty
      doneif (hero.tagis[source.PURevActi] = 1)

      ~ If we passed the above tests set the Shadow d20 Two-Weapon Fighting Tag
      perform hero.assign[Shadowd20.TwoWep]
      ]]></eval>

    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
      ~ If we don't have Shadow d20 Two-Weapon Fighting get out now
      doneif (hero.tagis[Shadowd20.TwoWep] <> 1)
      ~remove the attack penalties (This allows for one-handed weapons in the off-hand)
      ~perform hero.assign[Hero.TwoWepSup]

      var Hands as number
      var Bonus as number
      Bonus = 2
      Hands = 0

      ~ Count the number of hands in use
      foreach pick in hero from BaseWep where "Hero.MainHand | Hero.OffHand"
        If (eachpick.field[gIsEquip].value + eachpick.field[wIs2nd].value <> 0) Then
          ~ If we are a Two-handed weapon then we don't count for the bonus
          If (eachpick.tagis[wClass.TwoHanded] <> 1) Then
             Hands += 1
          Endif
        Endif 
      nexteach

      ~ Only give a bonus if we have a weapon in main and off hand
      If (Hands = 2) Then
        ~ Loop through all the weapons in main and off hand but ignore double weapons
        foreach pick in hero from BaseWep where "Hero.MainHand | Hero.OffHand & !wCategory.Double"
           eachpick.field[wAttMelee].value += Bonus
           eachpick.field[wRanAtk].value += Bonus
        nexteach
      Endif

      ~ Loop through all double weapons
      foreach pick in hero from BaseWep where "Hero.MainHand & Hero.OffHand & wCategory.Double"
         ~ Only if in Double weapon mode should we give the bonus
         if (eachpick.field[wIsDouble].value <> 0) Then     
            eachpick.field[wAttMelee].value += Bonus
         Endif
      nexteach
      ]]></eval>

    </thing>

  <!-- ======================================================================================= -->
  <!-- SPELL CHANGES                                                                           -->
  <!-- ======================================================================================= -->
  <thing id="s20CastTim" name="Shadow d20 Cast Time" 
    description="All 1 round casting time spells have been adjusted down to 1 Full-Round action instead. In play 1 round spells are too big of a nerf to spellcasters." 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="srcNo1Rnd"/>
    <bootstrap thing="s2Info1Rou"></bootstrap>
    <eval phase="First" priority="1000"><![CDATA[
      ~ Change all 1 round casting to 1 Full-Round casting time
      foreach pick in hero from BaseSpell where "sCastTime.Round1"
        perform eachpick.tagreplace[sCastTime.Round1,sCastTime.FullAction]
      nexteach]]></eval>
    </thing>


  <thing id="s20SpelDmg" name="Shadow d20 Spell Damage" 
    description="Just show info about spell damage bonus if your arcane or divine caster." 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="srcSpelDmg"/>
    <bootstrap thing="s2InfoSpDm"></bootstrap>
    <eval phase="PostLevel" priority="15000"><![CDATA[
      ~ Finished if not a Arcane or Divine caster
      doneif (hero.tagis[Hero.Caster] <> 1)

      var sTag as string
      var nCL as number
      var sName as string
      var iX as number
      iX = 0
      sName = " ("

      ~ Loop through all Divine/Arcane caster classes
      foreach pick in hero from Class where "CasterSrc.Arcane|CasterSrc.Divine"
          ~ Build all spec source tags
          sTag = eachpick.tagids[SpecSource.?,"|"]
          ~ Add spell-like ability tag
          sTag &= " & AbilType.SpellLike"
          ~ capture the caster level
          nCL = eachpick.field[cCasterLev].value
          If (iX > 0) Then
             sName &= ", " & eachpick.field[cAbbr].text & " +" & nCL
          Else
             sName &= eachpick.field[cAbbr].text & " +" & nCL
          Endif
          ~ loop through all Class Specials where we have the correct tags
          foreach pick in hero from BaseClSpec where sTag
             ~ Increase damage by the CL
             eachpick.field[DescAppend].text &= "{b}Shadow d20:{/b} If this spell-like ability does hit point damage it gains a bonus equal to your caster level (" & signed(nCL) & ")."  
          nexteach
          ~ increase count
          iX += 1
      nexteach
      sName &= ")"
      ~ Update live name of the Special Ability
      hero.childfound[s2InfoSpDm].field[livename].text = hero.childfound[s2InfoSpDm].field[name].text & sName
      
      ~ Find all touch attack weapons and show Extra Damage
      foreach pick in hero from BaseWep where "PackHelper.Touch"
         #extradamage[eachpick,sName,field[name].text]
      nexteach]]></eval>
    <eval phase="Final" priority="50000" index="2"><![CDATA[
      ~ Finished if not a Arcane or Divine caster
      doneif (hero.tagis[Hero.Caster] <> 1)    
      
      ~ Give damage CL text on to all spells on character
      foreach pick in hero from BaseSpell
        eachpick.field[DescAppend].text &= "{b}Shadow d20:{/b} If this spell does hit point damage it gains a bonus equal to your caster level (" & signed(eachpick.field[sCL].value) & ")."  
      nexteach]]></eval>
    </thing>

  <!-- ==================================================================================== -->
  <!-- Double All 9 level arcane casters spells                                             -->
  <!-- ==================================================================================== -->
  <thing id="s20DblSpls" name="Shadow d20 Double Spells" 
    description="Double arcane spells for Wizard, Sorcerers and Arcanists" 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="srcSpelDmg"/>
    <bootstrap thing="s2InfoDbSp"></bootstrap>
    <eval phase="First" priority="10"><![CDATA[
      var SearchExpr as string
      var spelllevel as number
      var level as number
      
      SearchExpr = "thingid.cHelpWiz|thingid.cHelpSor|thingid.cHelpArc"     
      perform hero.findchild[BaseClHelp,SearchExpr].setfocus
      ~ Only show us if we are a Wizard, Sorcerer, or Arcanist
      doneif (state.isfocus = 0)
      
      ~ Loop through all Wizard, Sorcerer, and Arcanist levels
      ~ This section changes the spells per day matrix
      foreach pick in hero from BaseClHelp where SearchExpr
        for level = 0 to 19
          for spelllevel = 0 to 9
            eachpick.field[cCastTot].matrixvalue[level,spelllevel] *= 2
            eachpick.field[cSecTot].matrixvalue[level,spelllevel] *= 2
          next
        next
      nexteach
      ]]></eval>
    <eval phase="Final" priority="10000" index="2"><![CDATA[
      var SearchExpr as string
      var spelllevel as number
      var level as number
      
      SearchExpr = "thingid.cHelpWiz|thingid.cHelpSor|thingid.cHelpArc"     
      perform hero.findchild[BaseClHelp,SearchExpr].setfocus
      ~ Only show us if we are a Wizard, Sorcerer, or Arcanist
      doneif (state.isfocus = 0)
      
      ~ Loop through all Wizard, Sorcerer, and Arcanist levels
      ~ This section changes the secondary spells per day array
      foreach pick in hero from BaseClHelp where SearchExpr
        for spelllevel = 0 to 9
          eachpick.field[cSecMax].arrayvalue[spelllevel] *= 2
        next
      nexteach
      ]]></eval>
    </thing>

  <!-- ==================================================================================== -->
  <!-- Double Spell Focus and Greater Spell Focus DC Bonus                                  -->
  <!-- ==================================================================================== -->
  <thing id="s20DblSFDC" name="Shadow d20 Spell Focus" 
    description="Double the DC bonus for Spell Focus and Greater Spell Focus" 
    compset="Simple" 
    uniqueness="useronce">
    <usesource source="srcSpelDmg"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If no spell focus/greater spell focus just get out now!
      doneif (hero.tagis[Hero.SpellFocus] = 0)

      ~ Loop through spell schools with Spell Focus
      foreach pick in hero from SplSchool where "Broadcast.SpellFocus"
        ~ Add 1 to the DC field on school helper
        eachpick.field[schDC].value += 1

        ~ If we have Greater Spell Focus then give an addtional one
        if (eachpick.tagis[Broadcast.SpellGrFoc] = 1) then
          eachpick.field[schDC].value += 1
        endif          
      nexteach
      ]]></eval>
    </thing>


  <!-- ==================================================================================== -->
  <!-- Shadow d20 misc text changes                                                         -->
  <!-- ==================================================================================== -->
  <thing id="s20MiscTxt" name="Shadow d20 Misc Text Changes" 
    description="This Thing sets the text desc on Things with house rules text." 
    compset="Simple">
    <usesource source="s20PFCamp"/>
    <eval phase="Render" priority="200"><![CDATA[
      ~ This has to be added this way as they are doing strange things
      ~ with this items Desc in the "totals" component.
      #appenddesc[wRcHarpoon,"{b}Shadow d20:{/b} Removed the weight of the rope as most times it will not be used that way. Increased the range increment to 50ft to make having the exotic weapon harpoon feet more worth while."]

      ~ Add extra text to the Scimitar
      #appenddesc[wScimitar,"{b}Shadow d20:{/b} A scimitar is treated as a light weapon when used as the off-hand weapon when two-weapon fighting, but only for the purpose of two-weapon fighting. A scimitar used as a off-hand weapon can not be weapon finessed even though its considered a light weapon."]

      ~ Boar Style feat
      #appenddesc[fBoarStyl,"{B}Shadow d20:{/b} The bleed damage on this feat is changed to rend damage which makes allot more sense."]

      ~ TWF and DR
      #appenddesc[fTwoWep,"{b}Shadow d20:{/b} When you fight with two weapons (not including a two-handed weapon) you may add the damage of your primary attack and off-hand attack together vs DR. This allows a more balanced approach vs two-handed weapons."]

      ~ Lore Skill from Unchained not as specific.
      #appenddesc[skLorOther,"{b}Shadow d20:{/b} Lore is changed to only be a little specific but NOT as restrictive as the book. Listed below are some new valid examples for what you could pick with Lore.{br}{br}-For gods list up to three gods.{br}-Any City, Town, Village regardless of size and know all areas of that location.{br}-Elves, Dwarves, Orcs, Half-Orcs, Goblins, or other specific race. But you can't say 'Humanoids'.{br}-Undead, Dragons, Aberrations, Devils, Demons, Lycanthrops, or other broad single Creature Type. So again you can't say 'Outsider (Evil)' but can list Devil or Demon."]

      ~ Unchained Sneak Attack
      #appenddesc[cSneakUnc,"{b}Shadow d20:{/b} The rogue can take advantage of the distractions that her allies attacks cause. When a creature is attacked in melee combat by an ally (regardless if its a hit or a miss) the rogue can deal sneak attack damage to that target until the end of the rogue's turn."]

      ~ Unchained poison note on Heal Skill
      if (hero.tagis[source.PUPoiDis] = 1) then
        #appenddesc[skHeal,"{b}Unchained:{/b} For every day of bed rest (or 2 nights of normal rest), a victim recovers one step; this recovery is doubled as normal by Heal checks, and tenacious poisons might require a longer recovery period."]
      endif

      var sText as string

      ~ Change feat text
      foreach thing in BaseFeat where "thingid.fElepStomp|thingid.fHeroicRec"
        ~ Elephant Stomp 
        If (eachthing.tagcountstr["thingid.fElepStomp"] = 1) Then
          perform eachthing.amendthing[description,"{b}Prerequisites:{/b} Str 13, Power Attack, Improved Overrun, base attack bonus +1.\n\n{b}Benefit:{/b} When you overrun an opponent and your maneuver check exceeds your opponent&#146;s CMD by 5 or more you can make one attack with an unarmed strike or a natural weapon against that opponent as a swift action.\n\n{b}Normal:{/b} When your overrun maneuver check exceeds your opponent's CMD by 5 or more, you move through the target's space and she is knocked prone.{br}{br}{B}Shadow d20:{/b} Changed wording to try and make this feat usuable."]
        Endif

        ~ Heroic Recovery feat and Unchained Poison rules active dd
        If (eachthing.tagcountstr["thingid.fHeroicRec"] + hero.tagis[source.PUPoiDis] = 2) Then
          perform eachthing.amendthing[description,"You can throw off the effects of crippling conditions.{br}{br}{b}Prerequisites{/b}: Diehard, Endurance, base Fortitude save +4.{br}{br}{b}Benefit{/b}: Once per day as a standard action you may attempt a new saving throw against a harmful condition or affliction requiring a Fortitude save that is affecting you. If this save against the affliction fails, there is no additional effect, but a successful save moves you up on the afflication track towards cured. You cannot use this feat to recover from instantaneous effects, effects that do not allow a saving throw, or effects that do not require a Fortitude save.{br}{br}{b}Shadow d20:{/b} This feat adjusted for use with Unchained poison/disease rules."]
        Endif

      nexteach

      ~ Fix Cape of Feinting
      foreach thing in BaseEquip where "thingid.ioCapeFein"
        If (eachthing.tagcountstr["thingid.ioCapeFein"] <> 0) Then
          ~ Build text string
          sText = eachthing.field[descript].text & "{br}{br}{b}Shadow d20:{/b} This cloak was not meant to have a unlimited daze ability. The ability to daze a target can only be done 3/day."
          ~ Set message
          perform eachthing.amendthing[description,sText]
        Endif
      nexteach

      ~ Add note about easy spellcasting with all shields
      foreach thing in BaseArmor where "ArmorClass.Shield"
        ~ Build text string
        sText = eachthing.field[descript].text & "{br}{br}{b}Shadow d20:{/b} Casting spells can be done with all types of shields. This requires no extra action and does not cause you to lose your shield bonus for the round."
        ~ Set message
        perform eachthing.amendthing[description,sText]
      nexteach            
      ]]></eval>
    </thing>


  <!-- ==================================================================================== -->
  <!-- Shadow d20 Unchained Action Economy text changes                                     -->
  <!-- ==================================================================================== -->
  <thing id="s20UAETxt" name="Shadow d20 Unchained Action Economy Text Changes" 
    description="This Thing sets the text desc on Things with house rules text." 
    compset="Simple">
    <usesource source="PURevActi"/>

    <eval phase="Render" priority="200"><![CDATA[
      ~ Rapid Shot
      #appenddesc[fRapidShot,"{b}Shadow d20 UAE:{/b} Works the exact same way as Two-Weapon Fighting/Flurry of Blows."]

      ~ Vital Strike
      #appenddesc[fVitStr,"{b}Shadow d20 UAE:{/b} Can only be used on the first attack action each round."]
      #appenddesc[fGrtVitStr,"{b}Shadow d20 UAE:{/b} Can only be used on the first attack action each round."]
      #appenddesc[fImpVitStr,"{b}Shadow d20 UAE:{/b} Can only be used on the first attack action each round."]

      ~ Manyshot
      #appenddesc[fManyshot,"{B}Shadow d20 UAE:{/b} Manyshot is only used on the first attack action each round."]

      ~ Quick Channel
      #appenddesc[fQuickChan,"{b}Shadow d20 UAE:{/b} This feat allows you to use Channel Energy twice a round instead of only once."]

      ~ Channel Energy
      #appenddesc[xChannel,"{b}Shadow d20 UAE [Channel Energy (1 Act)]:{/b} 1 Action to use NOT 2 but you still can only use this ability once per round. Unless you take the feat Quick Channel which allows you to use Channel Energy twice per round."]

      ~ Warlock Eldritch Blast
      #appenddesc[cWitS2ElBl,"{b}Shadow d20 UAE [Warlock Eldritch Blast (Variable)]:{/b} Standard Eldritch Blast is 1 act but by adding any Hex that alters the Eldritch Blast the action type is changed to a complex action and costs 2 acts."]  

      ~ Pounce
      #appenddesc[raPounce,"{b}Shadow d20 UAE [Pounce (3 Acts)]:{/b} A creature with this special attack can move up to double its base movement speed by taking a -2 AC penalty and at the end of its movement it can make all its natural attacks vs a single target."]

      ~ Total Defense
      perform state.thing[pstTotDef].amendthing[description,"{b}(2 Acts){/b} You concentrate on defense rather than attacking. Until the start of your next turn, you can't take actions with the attack subtype, and you gain a +4 dodge bonus to AC.  If you have at least 3 ranks in Acrobatics the bonus increases to +6."]

      ~ Staggered
      perform state.thing[pcnStagger].amendthing[description,"A staggered creature may take only a single action each round. A creature with nonlethal damage exactly equal to its current hit points gains the staggered condition."]

      ~ Nauseated
      perform state.thing[pcnNausea].amendthing[description,"Creatures with the nauseated condition experience stomach distress. Nauseated creatures are unable to attack, cast spells, concentrate on spells, or do anything else requiring attention. When nauseated you have a single action per round which can only used for simply actions without the 'attack' subtype. In addition you can not cast or begin to cast any spells."]

      ~ Disabled
      perform state.thing[pcnDisable].amendthing[description,"A character with 0 hit points, or one who has negative hit points but has become stable and conscious, is disabled. A disabled character may take a single action each round and moves at half speed. Taking subtype actions of 'move' doesn't risk further injury, but performing any other subtype of action (or any other action the GM deems strenuous, including some swift actions such as casting a Quicken Spell spell) deals 1 point of damage after the completion of the act. Unless the action increased the disabled character's hit points, he is now in negative hit points and dying.\n\nA disabled character with negative hit points recovers hit points naturally if he is being helped. Otherwise, each day he can attempt a DC 10 Constitution check after resting for 8 hours, to begin recovering hit points naturally. The character takes a penalty on this roll equal to his negative hit point total. Failing this check causes the character to lose 1 hit point, but this does not cause the character to become unconscious. Once a character makes this check, he continues to heal naturally and is no longer in danger of losing hit points naturally."]

      ~ Nauseated
      perform state.thing[pcnNausea].amendthing[description,"Creatures with the nauseated condition experience stomach distress. Nauseated creatures are unable to attack, cast spells, concentrate on spells, or do anything else requiring attention. When nauseated you have only a single simple action a round that may only be used on actions without the 'attack' subtype or for casting a spell."]

      ]]></eval>
    </thing>
   
    
  <thing id="s20RogueUn" 
    name="Shadow d20 Rogue Unchained" 
    description="Auto apply specific archetypes to the Unchained Rogue class." 
    compset="Simple" uniqueness="useronce">

    <usesource source="s20PFCamp"/>
    <bootstrap thing="arS2URog01">
      <containerreq phase="GlobalTest" priority="10050"><![CDATA[Shadowd20.arS2URog01]]></containerreq>    
    </bootstrap>
    <eval phase="GlobalTest" priority="10000"><![CDATA[
      ~ If unchained Rogue class found then apply archetype
      doneif (hero.haschild[BaseClHelp, "thingid.cHelpRogUn"] = 0)

      ~ Set archetype tag onto hero
      perform hero.assign[Shadowd20.arS2URog01]      
      ]]></eval>
    </thing>

    
  <thing id="s20Tracker" name="Shadow d20 Tracker Reset to Max" description="Set all trackers and action points to reset to Max instead of 0. This way a wand will be 50/50 instead of 50/50." compset="Simple" uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      
      foreach pick in hero from Tracker where "User.Tracker|thingid.hActionPts"
        perform eachpick.assign[Helper.ResetMax]
      nexteach]]></eval>
    </thing>
    
  <thing id="trkS2APs" name=" Action Points" description="A beginning (1st-level) character starts the game with 5 action points. A character above 1st level starts the game with a number of action points equal to 5 + 1/2 his current character level. Every time a character advances, he gains a number of action points equal to 5 + 1/2 his new character level.\n\nWhen you spend 1 action point to improve a d20 roll, you add the result of a 1d6 to your d20 roll (including attack rolls, saves, checks, or any other roll of a d20) to help you meet or exceed the target number. You can declare the use of 1 action point to alter a d20 roll after the roll is made, but only before the GM reveals the result of that roll. You can’t use an action point to alter the result of a d20 roll when you are taking 10 or taking 20.\n\nDepending on character level, a character might be able to roll more than one d6 when he spends an action point. If so, apply the highest result and disregard the other rolls. A 15th-level character, for instance, gets to roll 3d6 and take the best result of the three. So, if he rolled a 1, 2, and 4, he would apply the 4 to his d20 roll. \n\n{B}1st-7th{/b} 1d6\n{B}8th-14th{/b} 2d6\n{B}15th-20th{/b} 3d6" compset="Tracker" replaces="hActionPts" uniqueness="useronce">
    <fieldval field="trkMax" value="5"/>
    <usesource source="OptAction"/>
    <tag group="Usage" tag="S2Level" name="/level"/>
    <tag group="ProductId" tag="Shadowd20"/>
    <tag group="User" tag="Tracker"/>
    <tag group="ChargeCalc" tag="HitDieHalf"/>
    <tag group="ChargeCalc" tag="LevelX1"/>
    <tag group="Helper" tag="NoNightRes"/>
    <eval phase="Final" priority="10000"><![CDATA[
      var dice as number
      ~ Default is 1d6
      dice = 1

      ~ Calcaulte the number of dice to roll
      If (herofield[tLevel].value >= 8) Then
        dice += 1
      Endif
      If (herofield[tLevel].value >= 15) Then
        dice += 1
      Endif

      ~ Set livename
      field[livename].text = field[name].text & " " & dice & "d6"]]></eval>
    </thing>
    
  <thing id="s20NoXP" name="Shadow d20 No XP" description="This helper script prevents the need of using XP on level up." compset="Simple" uniqueness="useronce">
    <usesource source="s20PFCamp"/>
    <eval phase="PostAttr" priority="5000">~ This tag tells HL to not use XP!
      perform hero.assign[Hero.NoAdvance]</eval>
    </thing>

  <thing id="s2Info1Rou" name="Shadow d20 Cast Time" description="All 1 round casting time spells have been adjusted down to 1 Full-Round action instead. In play 1 round spells are too big of a nerf to spellcasters. Please note that the casting time will only be changed AFTER you add the spell to your character not before." compset="Ability" summary="1 round casting time spells are now 1 Full-Round action instead.">
    <usesource source="srcNo1Rnd"/>
    <tag group="ProductId" tag="Shadowd20"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ Only show us if we are a spellcaster
      If (hero.tagis[Hero.Caster] <> 0) Then
         perform assign[Helper.ShowSpec]
      Endif]]></eval>
    </thing>
  <thing id="s2InfoSpDm" name="Shadow d20 Spell Bonus Damage" description="All hit point dealing spells and spell-like abilities now gain a damage bonus equal to your caster level (CL). This bonus only applies once to a spell, not once per missile or ray, and cannot be split between multiple missiles or rays. This bonus damage is not increased by Empower Spell or similar effects. This damage is of the same type as the spell." compset="Ability" summary="Hit Point damaging Spells and Sp get your CL as a damage bonus.">
    <usesource source="srcSpelDmg"/>
    <tag group="ProductId" tag="Shadowd20"/>
    <eval phase="Final" priority="10000">
      ~ Only show us if we are a spellcaster
      doneif (hero.tagis[Hero.Caster] = 0)

      ~ Show us
      perform assign[Helper.ShowSpec]</eval>
    </thing>
  <thing id="s2InfoDbSp" 
    name="Shadow d20 Double Spells" 
    description="The number of spells per day for Arcanists, Sorcerers, and Wizards have been doubled. This allows these classes to keep up with the melee classes. Shadow d20 games combats run way longer than 3 rounds and easily have 4-6 encoutners per day. Spellcasters where running out of spells way too quickly." 
    summary="Spells per day have been doubled."
    compset="Ability">
    <usesource source="s20PFCamp"/>
    <tag group="ProductId" tag="Shadowd20"/>
    <eval phase="Final" priority="10000">
      ~ Only show us if we are a Wizard, Sorcerer, or Arcanist
      doneif (hero.tagis[Classes.Wizard] + hero.tagis[Classes.Sorcerer] + hero.tagis[Classes.Arcanist] = 0)

      ~ Show us
      perform assign[Helper.ShowSpec]</eval>
    </thing>


  <hidden id="fKQImpDA"/>
  <hidden id="fKQAddFavE"/>
  <hidden id="fKQAddFavT"/>
  <hidden id="cRslAddAC"/>
  <hidden id="fKQDeadAcc"/>
  <preclude id="raS2CatSce" source="ARG"/>
  <preclude id="raS2CatCle" source="ARG"/>
  <preclude id="raS2CatCli" source="ARG"/>
  <preclude id="rKitsune" source="srcNoRaces"/>
  <preclude id="rTengu" source="srcNoRaces"/>
  <preclude id="rcMwangi" source="srcCatFolk"/>
  <preclude id="fLeader" source="s20PFCamp"/>
  <preclude id="iElvenChn" source="s20PFCamp"/>
  <preclude id="iDwarfPlt" source="s20PFCamp"/>
  <preclude id="rcShoanti" source="srcShifter"/>
  <preclude id="rcUlfen" source="srcShaMino"/>
  <preclude id="spCorrTou1" source="s20PFCamp"/>
  <preclude id="rTiefling" source="srcNoRaces"/>
  <preclude id="rCatfolk" source="srcNoRaces"/>
  <preclude id="rRatfolk" source="srcNoRaces"/>
  <preclude id="rAasimar" source="srcNoRaces"/>
  <preclude id="raS2CatCur" source="ARG"/>
  <preclude id="raS2CatFal" source="ARG"/>
  </document>
