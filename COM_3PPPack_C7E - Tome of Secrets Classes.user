<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <loadonce key="COM_3PPPack_C7E - Tome of Secrets Classes"/>
  <fileinfo>
    <info_history>v1.1 Tim Shadow 7/10/10
-Fixed combat leader as it was bootstrapped too many times to the class.  It was attached twice at level 1.
-Changed Combat Leader(thingid.cComLead) class ability script so it uses a more HL standard way to calc the bonus.

v1.0 
-Created New(Frodie)

Author: Frodie
Contact: PM Frodie on Hero Lab forums.</info_history>
    </fileinfo>
  <thing id="cKnight" name="Knight" description="The knight is a noble warrior, set apart from other fighters by her breeding and training. Leaders on the battlefield, knights adhere to a code of behavior that garners respect from those around them. Knights are not limited to Western European-inspired settings. The samurai of Japan are certainly knights, as are the Hindu kshatriya. Any culture with an aristocracy will have knights, often as noble guardsmen and army officers.\n\n{b}Adventures:{/b} Knights often adventure for duty or glory. A knight may be commanded by her lord to protect a manor, clear a wood of humanoids, escort a noble, or rescue a hostage. A knight, especially a wandering knight, may also go on adventures to make a name for himself or to bring honor to his family.\n\n{b}Characteristics:{/b} Knights are bound by honor and, unlike paladins, their adherence to a moral code does not necessarily mean justice. Knights prefer order and will take command of an adventuring party if no one else will or the knight finds the current leadership lacking. They will not, however, command from behind, as their martial prowess ensures that they will always be on the front line with the other heavy hitters.\n\n{b}Alignment:{/b} With their dedication to honor and a moral code, knights are lawful by nature. They respect order and, in the absence of such, will work towards restoring it. Ethically, knights are more varied. There are good knights that believe in adhering to a code of chivalry to promote justice just as there are evil knights that enjoy the power that rank and privilege give them. Those in the middle, the neutral knights, are often more practical, enjoying the benefits of rank but not particularly charitable or harmful to others.\n\n{b}Background:{/b} The traditional knight is made, not born. Knighthoods are bestowed for service rendered, although children of knights or noble families are more often granted the privilege. Still, some knights were common folk that performed a great act and found themselves with a knighthood. There are often rivalries between those of an aristocratic background and those who were “uplifted” into knighthood. Not surprisingly, the population at large tend to support common-born knights more than aristocrats.\n\n{b}Races:{/b} Knights are a creation of a state and as such the race of a knight depends on the society that made her. Typically, knights are racially reflective of fighters or paladins in a particular society. Half-orcs generally aren’t knights, as they were either raised in chaotic bands or shunned in a “civilized” kingdom. Half-orcs that do become knights generally do so because their features favor their human side or they have done a great service for a particular lord.\n\n{b}Role:{/b} Knights are frontline combatants, especially while mounted on a battlefield. Within the adventuring party, the knight plays a front line role, although he is more likely to ensure that the weaker (martially-speaking) members of the party are protected." compset="ClassLevel" maxlimit="20">
    <usesource source="TomeOfSecr"/>
    <tag group="ClassType" tag="Normal"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="cHelpKnt"></bootstrap>
    <link linkage="helper" thing="cHelpKnt"/>
    </thing>
  <thing id="cCoCh" name="Code of Chivalry" description="A knight is expected to follow a moral code, even in combat. While the GM should feel free to create a code for roleplaying purposes, all knights should observe certain battlefield tactics. First, a knight will never attack a flat-footed or helpless foe. Second, a knight can never gain the benefit of flanking (although his position counts for an ally’s flanking bonus). Third, a knight will never attack a fleeing foe." compset="ClSpecial" summary="A knight is expected to follow a moral code, even in combat.">
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="cKHosp" name="Hospitality" description="A knight is respected in civilized lands, even if the knight does not serve the lord or country in question. Once per day, a knight can call upon the hospitality of a household. All of his basic needs and that of his companions will be met for that evening. Hospitality cannot be invoked if the household is at war with the knight’s lord or if the knight’s ill reputation (or that of her companions) precedes her. In these cases it is the GM’s judgment call." compset="ClSpecial" summary="Once per day, a knight can call upon the hospitality of a household.">
    <fieldval field="trkMax" value="1"/>
    <tag group="Helper" tag="ClExLose"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="Usage" tag="Day"/>
    <tag group="User" tag="Tracker"/>
    </thing>
  <thing id="cSturdy" name="Sturdy" description="At 17th level the knight can no longer be frightened. In addition, all allies under the effects of the knight’s rallying presence can no longer be shaken." compset="ClSpecial">
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="xImmFright">
      <containerreq phase="First" priority="500"><![CDATA[count:Classes.Knight >= 17 & !AbReplace.cSturdy]]></containerreq>
      </bootstrap>
    </thing>
  <thing id="cFearless" name="Fearless" description="At 19th level knights are immune to fear of any sort. In addition, all allies under the effects of the knight’s rallying presence can no longer be frightened or shaken." compset="ClSpecial">
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="xImmFear">
      <containerreq phase="First" priority="500"><![CDATA[count:Classes.Knight >= 19 & !AbReplace.cFearless]]></containerreq>
      </bootstrap>
    </thing>
  <thing id="cUnshake" name="Unshakable" description="At 13th level the knight can no longer be shaken." compset="ClSpecial">
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="xImmShaken">
      <containerreq phase="First" priority="500"><![CDATA[count:Classes.Knight >= 13 & !AbReplace.cUnshake]]></containerreq>
      </bootstrap>
    </thing>
  <thing id="cKChamp" name="Champion" description="At 9th level the knight can use her prowess to protect an ally that is within one of her threatened squares. She may grant that ally half of her Armor Class bonus at the expense of her own (this effect lasts a round, unless the knight chooses to continue the protection)." compset="ClSpecial">
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="User" tag="Activation"/>
    <eval phase="Final" priority="200000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Calculate half our AC bonus
      field[abValue].value += round(hero.child[ArmorClass].field[tAC].value/2,0,-1) * -1
      field[livename].text = field[name].text & " " & signed(field[abValue].value)

      ~ If we're not activated, just get out now!
      doneif (field[abilActive].value <> 1)
      hero.child[ArmorClass].field[tAC].value += field[abValue].value
      hero.child[ArmorClass].field[tACTouch].value += field[abValue].value
      hero.child[ArmorClass].field[tACFlat].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cKProt" name="Protector" description="At 7th level the knight becomes difficult to get around. She may add her class level to the DC of Acrobatic checks to get around her without provoking an attack of opportunity." compset="ClSpecial" summary="Add class level to the DC of Acrobatic checks to get around you.">
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      field[abValue].value += field[xTotalLev].value

      field[livename].text = field[name].text & " " & signed(field[abValue].value)]]></eval>
    </thing>
  <thing id="cGallant" name="Gallant" description="At 3rd level the knight has been subject to enough courtly intrigue to learn some tips. She gets a +2 bonus on Diplomacy and Sense Motive checks." compset="ClSpecial" summary="+2 bonus on Diplomacy and Sense Motive checks.">
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      #skillbonus[skDiplo] += 2
      #skillbonus[skSenseMot] += 2]]></eval>
    </thing>
  <thing id="cKMounCom" name="Mounted Combat" description="At 4th level and every four levels thereafter, the knight receives a bonus to his melee attack and armor class while mounted. The amount of the bonus is indicated on the knight table." compset="ClSpecial" summary="Bonus to attack/damage while mounted">
    <tag group="AbilType" tag="Extra"/>
    <tag group="Helper" tag="UseOwnLev"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="100000" index="2"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ if mounted condition not active get out now!
      doneif (tagis[Condition.pstMounted] <> 1)

      ~ Give bonus to AC and melee attacks when mounted
      hero.child[ArmorClass].field[Bonus].value += field[abValue].value
      hero.child[Attack].field[tAtkMelee].value += field[abValue].value]]></eval>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      field[listname].text = field[name].text & " " & signed(field[xIndex].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      field[abValue].value += field[xCount].value
      field[abSumm].text = "+" & field[abValue].value  & " bonus to melee attack and AC while mounted."
      field[livename].text = field[name].text & " " & signed(field[abValue].value)]]></eval>
    </thing>
  <thing id="cRallPre" name="Rallying Presence" description="At 5th level the knight can inspire her allies in combat. The knight and all allies within 10 ft per point of her Charisma bonus (minimum 10ft) gain a +1 morale bonus on saves against fear spells and effects. This bonus increases to +2 at 11th level and +3 at 15th level." compset="ClSpecial" summary="Bonus to saves against fear">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="UseOwnLev" name="UseOwnLev" abbrev="UseOwnLev"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="Final" priority="50000" index="2"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      #situational[hero.child[svWill],signed(field[abValue].value)  & " bonus vs fear.",field[name].text]]]></eval>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      field[listname].text = field[name].text & " " & signed(field[xIndex].value)

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Set bonus
      field[abValue].value += field[xCount].value
      ~ Set distance of 10ft per Cha bonus with minimu of 10ft
      field[abValue2].value += maximum(#attrbonus[aCHA] * 10,10)

      ~ Set text fields
      field[abSumm].text = signed(field[abValue].value)  & " bonus to saves against fear."
      field[livename].text = field[name].text & " " & signed(field[abValue].value) & " / " & field[abValue2].value & "ft"]]></eval>
    </thing>
  <thing id="cKPres" name="Knightly Presence" description="When wearing heavy armor, a knight gains a +4 on Intimidate checks against any opponent that can see him. In addition, when the knight uses her Intimidate check to demoralize an opponent, then the opponent is shaken for 1d4 rounds plus 1 round per point of the knight’s Charisma modifier." compset="ClSpecial" summary="Wearing heavy armor gain +4 on Intimidate checks.">
    <fieldval field="abValue" value="4"/>
    <tag group="Helper" tag="ClExLose"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      var bonus as number

      If (hero.tagis[Hero.HeavyArmor] = 1) then
         #skillbonus[skIntim] += field[abValue].value
      Endif

      field[livename].text = field[name].text & " 1d4"
      ~ Show the dice rounds
      If (#attrmod[aCHA] <> 0) then
         field[livename].text &= "+" & #attrmod[aCHA]
      Endif
      field[livename].text &= " rounds"]]></eval>
    </thing>
  <thing id="cPriest" name="Priest" description="The priest is a divine caster that focuses on knowledge rather than martial combat ability. Unlike the cleric, the priest is usually not found on the front lines, preferring to advise from a distance while healing wounds and asking for divine assistance. In civilized lands, priests are often found in the upper echelons of religious orders, running monasteries and temples while their cleric brethren protect them from harm.\n\n{b}Adventures:{/b} Priests are often quest-driven, traveling into dangerous territories on a mission for their gods. Priests have a thirst for knowledge, especially within their own pantheons and will often seek out ancient ruins to secure powerful artifacts, preserve a sacred temple, or banish evil from the world.\n\n{b}Characteristics:{/b} Priests are spiritual advisors and knowledge experts. Much of their authority comes from divine guidance, as many priests choose the knowledge domain. That said priests come in all stripes and they tend to have similar characteristics to those of their deity or philosophy, albeit a bit less martial.\n\n{b}Alignment:{/b} A priest’s choice of alignment largely depends on the deity she serves. Alignment is important as it determines the type of energy that a priest channels. Alignment is also a general indicator of the order in which the priest belongs. Lawful priesthoods tend to have strict hierarchies and rules, as well as tenets for paladins to pledge to. Chaotic priesthoods tend to be decentralized, with each priest free to create her own rules and rituals. Neutral priesthoods tend to fall somewhere in between, allowing for some structure yet also granting their individual priests a few freedoms.\n\n{b}Background:{/b} Priests come from all walks of life. Many are monastic or temple priests, rarely leaving their abodes to venture into the wide world. Some were orphans raised in a monastery, others were sent there because they would not inherit the family fortune or their family could not afford to feed them. Some were simply seekers of knowledge.\n\n{b}Races:{/b} Priests can be found amongst all races. Only half orcs tend not to be well-represented, as the more martial cleric is a better fit for their society.\n\n{b}Role:{/b} The priest has a support role within a typical adventuring party. Like the sorcerer or wizard, the priest usually stays in the back, supporting the front line with his spells. The priest is also useful when knowledge must be brought to bear to solve ancient puzzles or read forgotten texts." compset="ClassLevel" maxlimit="20">
    <usesource source="TomeOfSecr"/>
    <tag group="ClassType" tag="Normal"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="cHelpPst"></bootstrap>
    <link linkage="helper" thing="cHelpPst"/>
    </thing>
  <thing id="cPrChan" name="Channel Energy" description="Regardless of alignment, any priest can release a wave of energy by channeling the power of her faith through her holy (or unholy) symbol (see Channel Energy). This energy can be used to cause or heal damage, depending on the type of energy channeled and the creatures targeted.\n\nA good priest (or a neutral priest who worships a good deity) channels positive energy and can choose to deal damage to undead creatures or to heal living creatures. An evil priest (or a neutral priest who worships an evil deity) channels negative energy and can choose to deal damage to living creatures or to heal undead creatures. A neutral priest of a neutral deity (or one who is not devoted to a particular deity) must choose whether she channels positive or negative energy. Once this choice is made, it cannot be reversed. This decision also determines whether the priest can cast spontaneous cure or inflict spells (see spontaneous casting).\n\nChanneling energy causes a burst that affects all creatures of one type (either undead or living) in a 30-foot radius centered on the priest. The amount of damage dealt or healed is equal to 1d8 points of damage plus 1d8 points of damage for every two priest levels beyond 1st (2d6 at 3rd, 3d6 at 5th, and so on). Creatures that take damage from channeled energy receive a Will save to halve the damage. The DC of this save is equal to 10 + 1/2 the cleric&apos;s level + the priest&apos;s Charisma modifier. Creatures healed by channel energy cannot exceed their maximum hit point total—all excess healing is lost. A priest may channel energy a number of times per day equal to 3 + her Charisma modifier. This is a standard action that does not provoke an attack of opportunity. A priest can choose whether or not to include herself in this effect. A priest must be able to present her holy symbol to use this ability." compset="ClSpecial" summary="A good priest can channel positive energy; an evil priest  can channel negative energy.">
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="Helper" tag="ClExLose" name="ClExLose" abbrev="ClExLose"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="Helper" tag="UseOwnLev"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="xChannel"></bootstrap>
    <eval phase="PostLevel" priority="10000">~ Set our name properly
var v_turnname as string
call cClrTurnNm
field[livename].text = v_turnname

~ Add our cleric level to our turning level.
#value[xChannel] += field[xTotalLev].value</eval>
    <eval phase="PostAttr" priority="10000" index="2">~we can turn undead 3 + CHA mod / day
#trkmax[xChannel] += 3 + hero.child[aCHA].field[aModBonus].value</eval>
    </thing>
  <thing id="cPrAura" name="Aura" description="A priest of a chaotic, evil, good, or lawful deity has a particularly powerful aura corresponding to the deity&apos;s alignment (see the detect evil spell for details)." compset="ClSpecial" summary="The Priest has an aura corresponding to his deity&apos;s alignment.">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="ClExLose" name="ClExLose" abbrev="ClExLose"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="cPrSpCa" name="Spontaneous Casting" description="A good priest (or a neutral priest of a good deity) can channel stored spell energy into healing spells that she did not prepare ahead of time. The priest can &quot;lose&quot; any prepared spell that is not an orison or domain spell in order to cast any cure spell of the same spell level or lower (a cure spell is any spell with &quot;cure&quot; in its name).\n\nAn evil cleric (or a neutral cleric of an evil deity) can&apos;t convert prepared spells to cure spells but can convert them to inflict spells (an inflict spell is one with &quot;inflict&quot; in its name).\n\nA cleric who is neither good nor evil and whose deity is neither good nor evil can convert spells to either cure spells or inf lict spells (player&apos;s choice). Once the player makes this choice, it cannot be reversed. This choice also determines whether the cleric channels positive or negative energy (see channel energy)." compset="ClSpecial" summary="The priest can convert stored spells into Cure or Inflict spells.">
    <tag group="Helper" tag="ClExLose" name="ClExLose" abbrev="ClExLose"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="cPrLore" name="Lore" description="A priest adds half his class level (minimum 1) to all Knowledge skill checks and may make all Knowledge skill checks untrained." compset="ClSpecial" summary="You add half your priest level to all knowledge skill checks.">
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev=" (Ex)"/>
    <tag group="Helper" tag="UseOwnLev"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Our bonus is half our level minimum of 1
      field[abValue].value += maximum(round(field[xAllLev].value/2,0,-1), 1)
      ~ Add our value to our name
      field[livename].text = field[name].text & " " & signed(field[abValue].value)
      ~ Generate a summary incorporating our value
      field[abSumm].text = "Add " & signed(field[abValue].value) & " to all knowledge skill checks."

      ~ Give bonus to all Knowledge skills
      foreach pick in hero from BaseSkill where "Helper.SkCatKnow"
        eachpick.field[Bonus].value += field[abValue].value
        perform eachpick.delete[Helper.TrainOnly]
      nexteach]]></eval>
    </thing>
  <thing id="cHelpPst" name="Priest" compset="Class" uniqueness="unique">
    <fieldval field="cSecSpName" value="domain spells"/>
    <fieldval field="cSecSplReq" value="2"/>
    <fieldval field="cSpecSing" value="Domain"/>
    <fieldval field="cAbbr" value="Pst"/>
    <fieldval field="cHDSides" value="6"/>
    <fieldval field="cSkills" value="6"/>
    <fieldval field="srcBookInf" value=" [ToS]"/>
    <arrayval field="cCastTot" index="0" value="3"/>
    <arrayval field="cCastTot" index="0" column="1" value="1"/>
    <arrayval field="cCastTot" index="1" value="4"/>
    <arrayval field="cCastTot" index="1" column="1" value="2"/>
    <arrayval field="cCastTot" index="2" value="4"/>
    <arrayval field="cCastTot" index="2" column="1" value="2"/>
    <arrayval field="cCastTot" index="2" column="2" value="1"/>
    <arrayval field="cCastTot" index="3" value="5"/>
    <arrayval field="cCastTot" index="3" column="1" value="3"/>
    <arrayval field="cCastTot" index="3" column="2" value="2"/>
    <arrayval field="cCastTot" index="4" value="5"/>
    <arrayval field="cCastTot" index="4" column="1" value="3"/>
    <arrayval field="cCastTot" index="4" column="2" value="2"/>
    <arrayval field="cCastTot" index="4" column="3" value="1"/>
    <arrayval field="cCastTot" index="5" value="5"/>
    <arrayval field="cCastTot" index="5" column="1" value="3"/>
    <arrayval field="cCastTot" index="5" column="2" value="3"/>
    <arrayval field="cCastTot" index="5" column="3" value="2"/>
    <arrayval field="cCastTot" index="6" value="6"/>
    <arrayval field="cCastTot" index="6" column="1" value="4"/>
    <arrayval field="cCastTot" index="6" column="2" value="3"/>
    <arrayval field="cCastTot" index="6" column="3" value="2"/>
    <arrayval field="cCastTot" index="6" column="4" value="1"/>
    <arrayval field="cCastTot" index="7" value="6"/>
    <arrayval field="cCastTot" index="7" column="1" value="4"/>
    <arrayval field="cCastTot" index="7" column="2" value="3"/>
    <arrayval field="cCastTot" index="7" column="3" value="3"/>
    <arrayval field="cCastTot" index="7" column="4" value="2"/>
    <arrayval field="cCastTot" index="8" value="6"/>
    <arrayval field="cCastTot" index="8" column="1" value="4"/>
    <arrayval field="cCastTot" index="8" column="2" value="4"/>
    <arrayval field="cCastTot" index="8" column="3" value="3"/>
    <arrayval field="cCastTot" index="8" column="4" value="3"/>
    <arrayval field="cCastTot" index="8" column="5" value="1"/>
    <arrayval field="cCastTot" index="9" value="6"/>
    <arrayval field="cCastTot" index="9" column="1" value="4"/>
    <arrayval field="cCastTot" index="9" column="2" value="4"/>
    <arrayval field="cCastTot" index="9" column="3" value="3"/>
    <arrayval field="cCastTot" index="9" column="4" value="3"/>
    <arrayval field="cCastTot" index="9" column="5" value="2"/>
    <arrayval field="cCastTot" index="10" value="6"/>
    <arrayval field="cCastTot" index="10" column="1" value="5"/>
    <arrayval field="cCastTot" index="10" column="2" value="4"/>
    <arrayval field="cCastTot" index="10" column="3" value="4"/>
    <arrayval field="cCastTot" index="10" column="4" value="3"/>
    <arrayval field="cCastTot" index="10" column="5" value="2"/>
    <arrayval field="cCastTot" index="10" column="6" value="1"/>
    <arrayval field="cCastTot" index="11" value="6"/>
    <arrayval field="cCastTot" index="11" column="1" value="5"/>
    <arrayval field="cCastTot" index="11" column="2" value="4"/>
    <arrayval field="cCastTot" index="11" column="3" value="4"/>
    <arrayval field="cCastTot" index="11" column="4" value="3"/>
    <arrayval field="cCastTot" index="11" column="5" value="3"/>
    <arrayval field="cCastTot" index="11" column="6" value="2"/>
    <arrayval field="cCastTot" index="12" value="6"/>
    <arrayval field="cCastTot" index="12" column="1" value="5"/>
    <arrayval field="cCastTot" index="12" column="2" value="5"/>
    <arrayval field="cCastTot" index="12" column="3" value="4"/>
    <arrayval field="cCastTot" index="12" column="4" value="4"/>
    <arrayval field="cCastTot" index="12" column="5" value="3"/>
    <arrayval field="cCastTot" index="12" column="6" value="2"/>
    <arrayval field="cCastTot" index="12" column="7" value="1"/>
    <arrayval field="cCastTot" index="13" value="6"/>
    <arrayval field="cCastTot" index="13" column="1" value="5"/>
    <arrayval field="cCastTot" index="13" column="2" value="5"/>
    <arrayval field="cCastTot" index="13" column="3" value="4"/>
    <arrayval field="cCastTot" index="13" column="4" value="4"/>
    <arrayval field="cCastTot" index="13" column="5" value="3"/>
    <arrayval field="cCastTot" index="13" column="6" value="3"/>
    <arrayval field="cCastTot" index="13" column="7" value="2"/>
    <arrayval field="cCastTot" index="14" value="6"/>
    <arrayval field="cCastTot" index="14" column="1" value="5"/>
    <arrayval field="cCastTot" index="14" column="2" value="5"/>
    <arrayval field="cCastTot" index="14" column="3" value="5"/>
    <arrayval field="cCastTot" index="14" column="4" value="4"/>
    <arrayval field="cCastTot" index="14" column="5" value="4"/>
    <arrayval field="cCastTot" index="14" column="6" value="3"/>
    <arrayval field="cCastTot" index="14" column="7" value="2"/>
    <arrayval field="cCastTot" index="14" column="8" value="1"/>
    <arrayval field="cCastTot" index="15" value="6"/>
    <arrayval field="cCastTot" index="15" column="1" value="5"/>
    <arrayval field="cCastTot" index="15" column="2" value="5"/>
    <arrayval field="cCastTot" index="15" column="3" value="5"/>
    <arrayval field="cCastTot" index="15" column="4" value="4"/>
    <arrayval field="cCastTot" index="15" column="5" value="4"/>
    <arrayval field="cCastTot" index="15" column="6" value="3"/>
    <arrayval field="cCastTot" index="15" column="7" value="3"/>
    <arrayval field="cCastTot" index="15" column="8" value="2"/>
    <arrayval field="cCastTot" index="16" value="6"/>
    <arrayval field="cCastTot" index="16" column="1" value="5"/>
    <arrayval field="cCastTot" index="16" column="2" value="5"/>
    <arrayval field="cCastTot" index="16" column="3" value="5"/>
    <arrayval field="cCastTot" index="16" column="4" value="4"/>
    <arrayval field="cCastTot" index="16" column="5" value="4"/>
    <arrayval field="cCastTot" index="16" column="6" value="4"/>
    <arrayval field="cCastTot" index="16" column="7" value="3"/>
    <arrayval field="cCastTot" index="16" column="8" value="2"/>
    <arrayval field="cCastTot" index="16" column="9" value="1"/>
    <arrayval field="cCastTot" index="17" value="6"/>
    <arrayval field="cCastTot" index="17" column="1" value="5"/>
    <arrayval field="cCastTot" index="17" column="2" value="5"/>
    <arrayval field="cCastTot" index="17" column="3" value="5"/>
    <arrayval field="cCastTot" index="17" column="4" value="4"/>
    <arrayval field="cCastTot" index="17" column="5" value="4"/>
    <arrayval field="cCastTot" index="17" column="6" value="4"/>
    <arrayval field="cCastTot" index="17" column="7" value="3"/>
    <arrayval field="cCastTot" index="17" column="8" value="3"/>
    <arrayval field="cCastTot" index="17" column="9" value="2"/>
    <arrayval field="cCastTot" index="18" value="6"/>
    <arrayval field="cCastTot" index="18" column="1" value="5"/>
    <arrayval field="cCastTot" index="18" column="2" value="5"/>
    <arrayval field="cCastTot" index="18" column="3" value="5"/>
    <arrayval field="cCastTot" index="18" column="4" value="5"/>
    <arrayval field="cCastTot" index="18" column="5" value="4"/>
    <arrayval field="cCastTot" index="18" column="6" value="4"/>
    <arrayval field="cCastTot" index="18" column="7" value="4"/>
    <arrayval field="cCastTot" index="18" column="8" value="3"/>
    <arrayval field="cCastTot" index="18" column="9" value="3"/>
    <arrayval field="cCastTot" index="19" value="6"/>
    <arrayval field="cCastTot" index="19" column="1" value="5"/>
    <arrayval field="cCastTot" index="19" column="2" value="5"/>
    <arrayval field="cCastTot" index="19" column="3" value="5"/>
    <arrayval field="cCastTot" index="19" column="4" value="5"/>
    <arrayval field="cCastTot" index="19" column="5" value="4"/>
    <arrayval field="cCastTot" index="19" column="6" value="4"/>
    <arrayval field="cCastTot" index="19" column="7" value="4"/>
    <arrayval field="cCastTot" index="19" column="8" value="4"/>
    <arrayval field="cCastTot" index="19" column="9" value="4"/>
    <arrayval field="cCustTot" index="0" value="3"/>
    <usesource source="TomeOfSecr"/>
    <tag group="Language" tag="lCelestial" name="Celestial" abbrev="Celestial"/>
    <tag group="Language" tag="lInfernal" name="Infernal" abbrev="Infernal"/>
    <tag group="SecSplMech" tag="ReqClass"/>
    <tag group="cAttack" tag="Poor"/>
    <tag group="cFort" tag="Good" name="Fast" abbrev="Fast"/>
    <tag group="cRef" tag="Poor" name="Slow" abbrev="Slow"/>
    <tag group="cWill" tag="Good" name="Fast" abbrev="Fast"/>
    <tag group="AgeColumn" tag="3" name="Column 3 (Cleric, Druid, Monk, Wizard)" abbrev="Column 3 (Cleric, Druid, Monk, Wizard)"/>
    <tag group="AlgnReq" tag="Deity1Step" name="Within 1 Step of Deity&apos;s" abbrev="Within 1 Step of Deity&apos;s"/>
    <tag group="CastInfini" tag="0" name="0" abbrev="0"/>
    <tag group="CasterSrc" tag="Divine" name="Divine" abbrev="Divine"/>
    <tag group="CasterType" tag="MemAll" name="Memorized (Cleric)" abbrev="Memorized"/>
    <tag group="ClassPanel" tag="DeityTurn" name="Deity and Channeling" abbrev="Deity and Channeling"/>
    <tag group="ClassPanel" tag="ExNeeded" name="ExNeeded" abbrev="ExNeeded"/>
    <tag group="ClassSkill" tag="Craft" name="All Craft Skills" abbrev="All Craft Skills"/>
    <tag group="ClassSkill" tag="Profession" name="All Profession Skills" abbrev="All Profession Skills"/>
    <tag group="ClassSkill" tag="skAppraise" name="Appraise" abbrev="Appraise"/>
    <tag group="AllowCust" tag="cHelpClr"/>
    <tag group="ClassSkill" tag="skDiplo" name="Diplomacy" abbrev="Diplomacy"/>
    <tag group="ClassRole" tag="Spell"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="NoExSpells" name="NoExSpells" abbrev="NoExSpells"/>
    <tag group="ClassSkill" tag="Knowledge"/>
    <tag group="sClass" tag="cHelpClr"/>
    <tag group="ClassSkill" tag="skHeal" name="Heal" abbrev="Heal"/>
    <tag group="ClassSkill" tag="skLinguist" name="Linguistics" abbrev="Linguistics"/>
    <tag group="ClassSkill" tag="skSenseMot" name="Sense Motive" abbrev="Sense Motive"/>
    <tag group="ClassSkill" tag="skSpellcr" name="Spellcraft" abbrev="Spellcraft"/>
    <tag group="Classes" tag="Priest" name="Priest" abbrev="Cleric"/>
    <tag group="PackHelper" tag="ClsSrcAbr"/>
    <tag group="Language" tag="lAbyssal" name="Abyssal" abbrev="Abyssal"/>
    <bootstrap thing="fArmLight"></bootstrap>
    <bootstrap thing="fSimple"></bootstrap>
    <bootstrap thing="cPrAura">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPrSpCa">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPstDomain">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPrChan">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cPrLore">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <link linkage="spellattr" thing="aWIS"/>
    <link linkage="maxsplattr" thing="aWIS"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ Reset the class name to remove the special "(ToS)" text
      field[livename].text = tagnames[Classes.?]

      ~ Loop through all the Path of War Maneuvers
      ~foreach thing in Class where "thingid.cHelpPst"
      ~  perform eachthing.amendthing[name,"Priest"]
      ~nexteach]]></eval>
    <eval phase="Render" priority="10050" index="2"><![CDATA[
      ~ Try and find the base race
      perform hero.findchild[Ability,"thingid.xChannel & SpecSource.cHelpPst"].setfocus
      ~ if can't find then get out now!
      doneif (state.isfocus = 0)

      focus.field[livename].text = replace(focus.field[livename].text,"d6","d8",0)
      focus.field[sbName].text = replace(focus.field[sbName].text,"d6","d8",0)]]></eval>
    </thing>
  <thing id="cToSSwashb" name="Swashbuckler" description="The swashbuckler is a romantic fantasy staple, a warrior that relies on his agility and wits rather than heavy armor, shields and crushing weapons.\n\nThe swashbuckling style is particularly suited to environments where heavy armor would be a liability, such as in deserts, tropical locales, and the high seas. Swashbucklers are also prevalent in advanced societies, where gunpowder or magic has made the wearing of armor less desirable." compset="ClassLevel" summary="Swashbucklers are warriors, although like rangers they tend to be more dexterous and light on their feet than their armored fighter cousins." maxlimit="20">
    <comment>Welcome to the Tome of Secrets -- Adamant Entertainment’s first foray into the world of The Pathfinder Roleplaying Game from Paizo Publishing. We’re thrilled to providing support for this game, which keeps the flame of Third Edition burning bright!</comment>
    <usesource source="TomeOfSecr"/>
    <tag group="ClassType" tag="Normal"/>
    <bootstrap thing="cHelpSwa"></bootstrap>
    <link linkage="helper" thing="cHelpSwa"/>
    </thing>
  <thing id="cEvad" name="Evade" description="When wearing no or light armor, the swashbuckler adds his Evade bonus to his armor class. This is considered a Dodge bonus and if ever denied his Dex bonus to armor class he also loses his Evade bonus.\n\nEvade may be substituted for the Dodge feat as a prerequisite for other feats (for example, a swashbuckler with Evade +1 need not take the Dodge feat in order to select the Mobility feat)." compset="ClSpecial" summary="Dodge bonus to AC.">
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
~Set the list name
field[listname].text = field[thingname].text & " +" & field[xIndex].value  & "AC"

~ If we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] <> 1)
~if we've been replaced, get out now
doneif (tagis[Helper.SpcReplace] <> 0)

field[abValue].value += field[xCount].value
field[livename].text = field[thingname].text & " +" & field[abValue].value  & "AC"
field[abSumm].text = "+" & field[abValue].value & " dodge bonus to your AC."

~ Set ourself to act like the Dodge Feat
perform hero.assign[HasFeat.fDodge]

~ Only if wearing no armor or light armor
doneif (hero.tagis[Hero.MedArmor] + hero.tagis[Hero.HeavyArmor] <> 0)

~Apply a +1 cumliative dodge bonus
hero.child[ArmorClass].field[tACDodge].value += 1]]></eval>
    </thing>
  <thing id="cImUD" name="Improved Uncanny Dodge" description="At 7th level the swashbuckler’s uncanny ability to dodge is honed to the point where he can no longer be flanked." compset="ClSpecial" summary=" Can no longer be flanked.">
    <tag group="SpecType" tag="Defense"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="cThru" name="Thrust" description="The swashbuckler may thrust whenever his opponent is denied her Dexterity bonus to her armor class or when he flanks his opponent." compset="ClSpecial" summary="+1d6 to your Thrust damage.">
    <tag group="Helper" tag="UseOwnLev" name="UseOwnLev" abbrev="UseOwnLev"/>
    <tag group="SpecType" tag="Attack" name="Attack" abbrev="Attack"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      field[abValue].value += field[xCount].value
      field[livename].text = "Thrust Attack +" & field[abValue].value & "d6"
      field[abSumm].text = "+" & field[abValue].value & "d6 damage if you flank your target or your target is flat-footed."
      field[listname].text = "Thrust Attack +" & field[xIndex].value & "d6"]]></eval>
    </thing>
  <thing id="cFdMk" name="Find the Mark" description="The swashbuckler increases his threat range by one when using any melee weapon with which he has Weapon Finesse." compset="ClSpecial" summary=" Increases his threat range by one">
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[  ~Post-levels 10,000
~if we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)
 
foreach thing in BaseWep where "wClass.Light | Helper.Finesse"
  perform eachthing.amendthing[description,eachthing.field[descript].text & "{br}{br}{b}Addition from Find the Mark{/b}: Threat Range Increased by 1"]
  nexteach

~foreach pick in hero where "wClass.Light | Helper.Finesse"
~ each.field[wCrit].value -= 5
~perform eachpick.assign[Broadcast.ImpCrit]
~  nexteach]]></eval>
    </thing>
  <thing id="cImMk" name="Improved Mark" description="At 16th level, the swashbuckler becomes even more adept at finding marks. The threat range now improves by two when the swashbuckler uses his Find the Mark ability." compset="ClSpecial" summary="The threat range now improves by two when the swashbuckler uses his Find the Mark ability.">
    <tag group="SpecType" tag="Attack"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[  ~Post-levels 10,000
~if we're not shown, just get out now
doneif (tagis[Helper.ShowSpec] = 0)

 foreach thing in BaseWep where "wClass.Light | Helper.Finesse"
  perform eachthing.amendthing[description,eachthing.field[descript].text & "{br}{br}{b}Addition from Improved Mark{/b}: Threat Range Increased by 2"]
  nexteach

foreach pick in hero where "wClass.Light | Helper.Finesse"
~ each.field[wCrit].value -= 2
perform eachpick.assign[Broadcast.ImpCrit]
  nexteach]]></eval>
    </thing>
  <thing id="cSwaDefArr" name="Deflect Arrow (bonus feat)" description="A swashbuckler gains Deflect Arrow as a bonus feat at 13th level." compset="ClSpecial" summary="You gain Endurance as a bonus feat.">
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="fDefArrow">
      <containerreq phase="First" priority="500"><![CDATA[
     count:Classes.Swashbuck >= 13]]></containerreq>
      <autotag group="thing" tag="skipprereq"/>
      </bootstrap>
    </thing>
  <thing id="cHelpSwa" name="Swashbuckler" description="The swashbuckler is a romantic fantasy staple, a warrior that relies on his agility and wits rather than heavy armor, shields and crushing weapons.\n\nThe swashbuckling style is particularly suited to environments where heavy armor would be a liability, such as in deserts, tropical locales, and the high seas. Swashbucklers are also prevalent in advanced societies, where gunpowder or magic has made the wearing of armor less desirable." compset="Class" summary="Swashbucklers are warriors, although like rangers they tend to be more dexterous and light on their feet than their armored fighter cousins." uniqueness="unique">
    <fieldval field="cSpecSing" value="Weapon Training Ability"/>
    <fieldval field="cAbbr" value="Swa"/>
    <fieldval field="cHDSides" value="10"/>
    <fieldval field="cSkills" value="4"/>
    <fieldval field="cSpecName" value="Weapon Training Abilities"/>
    <fieldval field="srcBookInf" value=" [ToS]"/>
    <arrayval field="cBonFtTot" index="2" value="1"/>
    <arrayval field="cBonFtTot" index="5" value="2"/>
    <arrayval field="cBonFtTot" index="8" value="3"/>
    <arrayval field="cBonFtTot" index="11" value="4"/>
    <arrayval field="cBonFtTot" index="14" value="5"/>
    <arrayval field="cBonFtTot" index="17" value="6"/>
    <arrayval field="cCustTot" index="4" value="1"/>
    <usesource source="TomeOfSecr"/>
    <tag group="Classes" tag="Swashbuck" name="Swashbuckler" abbrev="Fighter"/>
    <tag group="cAttack" tag="Good" name="Good" abbrev="Good"/>
    <tag group="cFort" tag="Good" name="Good" abbrev="Good"/>
    <tag group="fInclude" tag="fBlindFgt"/>
    <tag group="fInclude" tag="fCatchOff"/>
    <tag group="fInclude" tag="fComExpert"/>
    <tag group="fInclude" tag="fComRef"/>
    <tag group="fInclude" tag="fDazzDisp"/>
    <tag group="fInclude" tag="fDeadStro"/>
    <tag group="fInclude" tag="fDblSlice"/>
    <tag group="fInclude" tag="fGrtTwoWep"/>
    <tag group="fInclude" tag="fGrtWepFoc"/>
    <tag group="fInclude" tag="fGrtWepSpc"/>
    <tag group="fInclude" tag="fImpCrit"/>
    <tag group="fInclude" tag="fImpDis"/>
    <tag group="fInclude" tag="fImpFeint"/>
    <tag group="fInclude" tag="fImpInit"/>
    <tag group="fInclude" tag="fImpTrip"/>
    <tag group="fInclude" tag="fImpTwoWep"/>
    <tag group="fInclude" tag="fImpVitStr"/>
    <tag group="fInclude" tag="fImprovWep"/>
    <tag group="fInclude" tag="fIntProw"/>
    <tag group="fInclude" tag="fLightSta"/>
    <tag group="fInclude" tag="fMobility"/>
    <tag group="fInclude" tag="fQuickDraw"/>
    <tag group="fInclude" tag="fSpringAtt"/>
    <tag group="fInclude" tag="fThrowAny"/>
    <tag group="fInclude" tag="fTwoWepDef"/>
    <tag group="fInclude" tag="fTwoWep"/>
    <tag group="fInclude" tag="fTwoWepRen"/>
    <tag group="fInclude" tag="fVitStr"/>
    <tag group="fInclude" tag="fWepFoc"/>
    <tag group="fInclude" tag="fWepSpec"/>
    <tag group="fInclude" tag="fWhirlwind"/>
    <tag group="fInclude" tag="fWindStan"/>
    <tag group="cRef" tag="Good"/>
    <tag group="cWill" tag="Poor" name="Poor" abbrev="Poor"/>
    <tag group="ClassSkill" tag="skAcrobat"/>
    <tag group="ClassSkill" tag="Craft" name="All Craft Skills" abbrev="All Craft Skills"/>
    <tag group="ClassSkill" tag="Profession" name="All Profession Skills" abbrev="All Profession Skills"/>
    <tag group="AgeColumn" tag="2" name="Column 2 (Bard, Fighter, Paladin, Ranger)" abbrev="Column 2 (Bard, Fighter, Paladin, Ranger)"/>
    <tag group="ClassSkill" tag="skIntim" name="Intimidate" abbrev="Intimidate"/>
    <tag group="ClassSkill" tag="skClimb" name="Climb" abbrev="Climb"/>
    <tag group="ClassSkill" tag="skBluff"/>
    <tag group="ClassSkill" tag="skRide" name="Ride" abbrev="Ride"/>
    <tag group="ClassSkill" tag="skDiplo"/>
    <tag group="ClassSkill" tag="skEscape"/>
    <tag group="ClassSkill" tag="skSenseMot"/>
    <tag group="AllowCust" tag="cHelpFtr"/>
    <tag group="ClassSkill" tag="skHandleAn" name="Handle Animal" abbrev="Handle Animal"/>
    <tag group="ClassSkill" tag="skSwim" name="Swim" abbrev="Swim"/>
    <tag group="PackHelper" tag="ClsSrcAbr"/>
    <bootstrap thing="cThru">
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="cThru">
      <autotag group="ClSpecWhen" tag="17"/>
      </bootstrap>
    <bootstrap thing="cThru">
      <autotag group="ClSpecWhen" tag="20"/>
      </bootstrap>
    <bootstrap thing="cFdMk">
      <autotag group="ClSpecWhen" tag="7"/>
      </bootstrap>
    <bootstrap thing="cImMk">
      <autotag group="ClSpecWhen" tag="16"/>
      </bootstrap>
    <bootstrap thing="fWepMart"></bootstrap>
    <bootstrap thing="fArmLight"></bootstrap>
    <bootstrap thing="fSimple"></bootstrap>
    <bootstrap thing="cEvad">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cEvad">
      <autotag group="ClSpecWhen" tag="4"/>
      </bootstrap>
    <bootstrap thing="cEvad">
      <autotag group="ClSpecWhen" tag="9"/>
      </bootstrap>
    <bootstrap thing="cEvad">
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="cEvad">
      <autotag group="ClSpecWhen" tag="19"/>
      </bootstrap>
    <bootstrap thing="cSwaDefArr">
      <autotag group="ClSpecWhen" tag="13"/>
      </bootstrap>
    <bootstrap thing="cUncanny">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="cEvasion">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cImpEvas">
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="cImUD">
      <autotag group="ClSpecWhen" tag="7"/>
      </bootstrap>
    <bootstrap thing="fWepFin">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cThru">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="cThru">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cThru">
      <autotag group="ClSpecWhen" tag="8"/>
      </bootstrap>
    <bootstrap thing="cThru">
      <autotag group="ClSpecWhen" tag="11"/>
      </bootstrap>
    <eval phase="First" priority="10000"><![CDATA[
      ~ Reset the class name to remove the special "(ToS)" text
      field[livename].text = tagnames[Classes.?]]]></eval>
    </thing>
  <thing id="cHelpWaL" name="Warlord" description="Warlords are warriors, born of battle. They stand alongside dedicated warriors like the Knight or the Paladin, without those classes strict codes of behavior. They are focused upon cunning strategies, tactical superiority and offering inspiration and leadership to their allies." compset="Class" summary="A Warlord is a leader on the battlefield, standing on the front line, commanding troops and offering aid to allies as the battle rages. They are brilliant tacticians, often spelling the difference between defeat and victory." uniqueness="unique">
    <fieldval field="cAbbr" value="WaL"/>
    <fieldval field="cHDSides" value="10"/>
    <fieldval field="srcBookInf" value=" [ToS]"/>
    <fieldval field="cSkills" value="4"/>
    <arrayval field="cBonFtTot" index="2" value="1"/>
    <arrayval field="cBonFtTot" index="4" value="2"/>
    <arrayval field="cBonFtTot" index="8" value="3"/>
    <arrayval field="cBonFtTot" index="12" value="4"/>
    <arrayval field="cBonFtTot" index="16" value="5"/>
    <usesource source="TomeOfSecr"/>
    <tag group="ClassSkill" tag="skDiplo"/>
    <tag group="ClassSkill" tag="skIntim"/>
    <tag group="ClassSkill" tag="skKnowEng"/>
    <tag group="ClassSkill" tag="skKnowHist"/>
    <tag group="ClassSkill" tag="skPercep"/>
    <tag group="ClassSkill" tag="skRide"/>
    <tag group="ClassSkill" tag="skStealth"/>
    <tag group="ClassSkill" tag="skSurvival"/>
    <tag group="Classes" tag="Warlor" name="Warlord"/>
    <tag group="cAttack" tag="Good"/>
    <tag group="AgeColumn" tag="2"/>
    <tag group="cFort" tag="Good"/>
    <tag group="fInclude" tag="fAnimAff"/>
    <tag group="fInclude" tag="fCleave"/>
    <tag group="fInclude" tag="fComRef"/>
    <tag group="fInclude" tag="fDiehard"/>
    <tag group="fInclude" tag="fEndure"/>
    <tag group="fInclude" tag="fGreatClv"/>
    <tag group="fInclude" tag="fGrtWepFoc"/>
    <tag group="fInclude" tag="fGrtWepSpc"/>
    <tag group="fInclude" tag="fImpCrit"/>
    <tag group="fInclude" tag="fImpInit"/>
    <tag group="fInclude" tag="fImpVitStr"/>
    <tag group="fInclude" tag="fIntProw"/>
    <tag group="fInclude" tag="fLeader"/>
    <tag group="fInclude" tag="fs20MntCom"/>
    <tag group="fInclude" tag="fPowerAtt"/>
    <tag group="fInclude" tag="fRideBy"/>
    <tag group="fInclude" tag="fSpirChar"/>
    <tag group="fInclude" tag="fTrample"/>
    <tag group="fInclude" tag="fVitStr"/>
    <tag group="fInclude" tag="fWepFoc"/>
    <tag group="fInclude" tag="fWepSpec"/>
    <tag group="ClassSkill" tag="skClimb"/>
    <tag group="cRef" tag="Poor"/>
    <tag group="cWill" tag="Good"/>
    <tag group="ClassSkill" tag="skAcrobat"/>
    <tag group="ClassSkill" tag="skBluff"/>
    <tag group="PackHelper" tag="ClsSrcAbr"/>
    <bootstrap thing="fArmLight"></bootstrap>
    <bootstrap thing="fArmMedium"></bootstrap>
    <bootstrap thing="fWepMart"></bootstrap>
    <bootstrap thing="fArmShield"></bootstrap>
    <bootstrap thing="fSimple"></bootstrap>
    <bootstrap thing="fArmTower"></bootstrap>
    <bootstrap thing="cComLead">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cCommPres">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cInspirati">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cHtL">
      <autotag group="ClSpecWhen" tag="2"/>
      </bootstrap>
    <bootstrap thing="cComLead">
      <autotag group="ClSpecWhen" tag="3"/>
      </bootstrap>
    <bootstrap thing="cRallPres">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cCommPres">
      <autotag group="ClSpecWhen" tag="8"/>
      </bootstrap>
    <bootstrap thing="cCryHavoc">
      <autotag group="ClSpecWhen" tag="10"/>
      </bootstrap>
    <bootstrap thing="cComLead">
      <autotag group="ClSpecWhen" tag="14"/>
      </bootstrap>
    <bootstrap thing="cCommPres">
      <autotag group="ClSpecWhen" tag="18"/>
      </bootstrap>
    <bootstrap thing="cOntVic">
      <autotag group="ClSpecWhen" tag="20"/>
      </bootstrap>
    <bootstrap thing="fArmHeavy"></bootstrap>
    <eval phase="First" priority="10000"><![CDATA[
      ~ Reset the class name to remove the special "(ToS)" text
      field[livename].text = tagnames[Classes.?]]]></eval>
    </thing>
  <thing id="cWarlor" name="Warlord" description="Warlords are warriors, born of battle. They stand alongside dedicated warriors like the Knight or the Paladin, without those classes strict codes of behavior. They are focused upon cunning strategies, tactical superiority and offering inspiration and leadership to their allies." compset="ClassLevel" summary="A Warlord is a leader on the battlefield, standing on the front line, commanding troops and offering aid to allies as the battle rages. They are brilliant tacticians, often spelling the difference between defeat and victory." maxlimit="20">
    <usesource source="TomeOfSecr"/>
    <tag group="ClassType" tag="Normal"/>
    <bootstrap thing="cHelpWaL"></bootstrap>
    <link linkage="helper" thing="cHelpWaL"/>
    </thing>
  <thing id="cComLead" name="Combat Leader" description="At 1st level, the warlord begins to demonstrate the brilliance of their battlefield leadership. The warlord and all allies within 10 ft per point of his Charisma bonus + half his class level gain a +2 bonus to initiative. This bonus increases to +3 at 6th level and +4 at 14th level" compset="ClSpecial" summary="Bonus to initiative">
    <comment>Tome of Secrets -- Adamant Entertainment</comment>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostAttr" priority="1000"><![CDATA[~Set the list name
var bonus as number
var dist as number
~Calc display bonus
bonus = 1 + field[xIndex].value
~Calc the distance for the players
dist = (hero.child[aCHA].field[aModBonus].value + round(#levelcount[Warlor]/2,0,-1)) * 10
~Change the list name
field[listname].text = field[thingname].text & " +" & bonus & "(" & dist & "ft)"

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)
~ Set the local variable 
field[abValue].value += 1

~Only on the first copy do we want to add an extra +1 to the bonus
if (tagis[Helper.FirstCopy] <> 0) then
       field[abValue].value += 1
Endif
~Calc display bonus
bonus = 1 + field[xCount].value

~Set the live name
field[livename].text = field[thingname].text & " +" & bonus & "(" & dist & "ft)"

~ Adjust the final Initiative bonus here
hero.child[Initiative].field[Bonus].value += field[abValue].value]]></eval>
    </thing>
  <thing id="cCommPres" name="Commanding Presence" description="The mere appearance of a warlord upon the field of battle has a positive impact among his allies. All allies that can see the warlord gain a +1 bonus to attack and weapons damage rolls. This bonus increases to +2 at 8th level, and +3 at 18th level." compset="ClSpecial" summary="Bonus to attack and weapons damage rolls">
    <comment>Tome of Secrets - Adamant Entertainment</comment>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First" index="2">hero.child[Damage].field[tDamBonus].value += 1</eval>
    <eval phase="First">hero.child[Attack].field[Bonus].value += 1</eval>
    </thing>
  <thing id="cInspirati" name="Inspiration" description="During battle, the warlord exhorts his comrades with words of courage and determination. This inspiration affects all allies within a 30-foot radius centered on the warlord, and bestows 1d6 temporary hit points, plus 1d6 additional points for every two warlord levels beyond 1st (2d6 at 3rd, 3d6 at 5th, and so on) These temporary hit points last until the battle ends, or until they are removed through damage.\n\nA warlord may inspire a number of times per day equal to 3+ his Charisma modifer. This is a standard action and does not provoke an attack of opportunity. The warlord can choose whether or not to include himself in this effect." compset="ClSpecial" summary="Bestows 1d6 temporary hit points">
    <comment>Tome of Secrets - Adamant Entertainment</comment>
    <fieldval field="shortname" value="Inspiration"/>
    <tag group="User" tag="Tracker" name="Tracker" abbrev="Tracker"/>
    <tag group="AbilType" tag="Super" name="Supernatural Ability" abbrev=" (Su)"/>
    <tag group="Helper" tag="ClExLose" name="ClExLose" abbrev="ClExLose"/>
    <tag group="Usage" tag="Day" name="/day" abbrev="/day"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      var uses as number
      uses = field[xAllLev].value / 2
      field[abValue].value += round(uses,0,-1)

      field[trkMax].value += hero.child[aCHA].field[aModBonus].value + round(uses,0,-1)

      hero.childfound[xChannel].field[trkMax].value += round(field[trkMax].value/2,0,-1)

      field[livename].text = "Inspiration (" & field[abValue].value & "d6)"
      field[abSumm].text = "Bestows temporary hit points " & field[abValue].value & "d6 damage, " & field[trkMax].value & "/day"]]></eval>
    </thing>
  <thing id="cHtL" name="Hold the Line" description="At 3rd level, the warlord gains the ability to bolster a defensive line. When forming a defensive line (fighting defensively and standing adjacent to one another), the warlord and all allies gain a +2 competence bonus to AC." compset="ClSpecial" summary="+2 competence bonus to AC">
    <comment>Tome of Secrets -- Adamant Entertainment</comment>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First">hero.child[ArmorClass].field[Bonus].value += 2</eval>
    </thing>
  <thing id="cRallPres" name="Rallying Presence" description="At 5th level the warlord gains the ability to rally others, identical to the Warlord’s ability of the same name. The warlord and all allies within 10 ft per point of her Charisma bonus (minimum 10ft) gain a +1 morale bonus on saves against fear spells and effects. This bonus increases to +2 at 11th level and +3 at 15th level." compset="ClSpecial" summary="+1 morale bonus on saves against fear spells and effects">
    <comment>Tome of Secrets -- Adamant Entertainment</comment>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First"><![CDATA[
      field[listname].text = "Rallying Presence +" & field[xIndex].value

      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      field[abValue].value += field[xCount].value
      field[abSumm].text = "+" & field[abValue].value  & " Bonus to saves against fear"
      field[livename].text = "Rallying Presence +" & field[abValue].value]]></eval>
    </thing>
  <thing id="cCryHavoc" name="Cry Havoc" description="At 10th level, the warlord may direct their allies to attack a specific target, overwhelming the enemy. The warlord designates a particular target, and until the end of the warlord’s next turn, any attack roll against that target can now score a critical hit on a roll of 18-20, and receive a +4 bonus to confirm the results of a critical hit. The warlord can cry havoc a number of times per day equal to 3+ his Charisma modifer. This is a standard action, and does not provoke an attack of opportunity." compset="ClSpecial" summary="Score a critical hit on a roll of 18-20">
    <comment>Tome of Secrets -- Adamant Entertainment</comment>
    <fieldval field="trkMax" value="3"/>
    <tag group="User" tag="Tracker"/>
    <tag group="Usage" tag="Day"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="cOntVic" name="Onward to Victory" description="At 20th level, the warlord may exhort their allies to glory. Until the end of warlord’s next turn, the warlord and all allies within 10 ft per point of point of his Charisma bonus + half his class level may follow up a standard action with an attack made as a free action. This ability may be used once per day." compset="ClSpecial" summary="An attack made as a free action">
    <comment>Tome of Secrets -- Adamant Entertainment</comment>
    <fieldval field="trkMax" value="1"/>
    <tag group="User" tag="Tracker"/>
    <tag group="Usage" tag="Day"/>
    <tag group="ProductId" tag="HLCommunit"/>
    </thing>
  <thing id="cPstDomain" name="Domains" description="Most priests worship deities associated with knowledge and learning. A priest’s deity influences his alignment, what magic he can perform, his values, and how others see him. A priest chooses two domains from among those belonging to his deity. A priest can select an alignment domain (Chaos, Evil, Good, or Law) only if his alignment matches that domain. In addition to any domains selected from his deity’s list, a priest automatically gains the Knowledge domain as a bonus domain (even if the Knowledge domain is not normally available to clerics of that deity). He gains the Knowledge domain granted power and may select his bonus domain spells from the Knowledge domain or from one of his two regular domains.\n\nIf a priest is not devoted to a particular deity, he still gains the Knowledge domain and selects two domains to represent his spiritual inclinations and abilities. The restriction on alignment domains still applies. Each domain gives the priest access to a domain spell at each spell level he can cast, from 1st on up, as well as a granted power. The priest gets the granted powers of both the domains selected as well as the Knowledge domain.\n\nWith access to three domain spells at a given spell level, a priest prepares two of the three each day in his domain spell slots for each spell level that he can access. If a domain spell is not on the priest spell list, a priest can prepare it only in his domain spell slot." compset="ClSpecial" summary="Receive the Knowledge domain for free.">
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] <> 1)
      ~ if we've been disabled, get out now
      doneif (tagis[Helper.SpcDisable] <> 0)

      ~ Set the allowed Knowledge domain tag to hero
      perform hero.assign[AllowDom.cdKnow]]]></eval>
    <exprreq message="One of your domains must be the Knowledge domain."><![CDATA[#hasability[cdKnow] <> 0]]></exprreq>
    </thing>
  <thing id="cHelpKnt" name="Knight" compset="Class" uniqueness="unique">
    <fieldval field="cHDSides" value="12"/>
    <fieldval field="cAbbr" value="Knt"/>
    <fieldval field="cSkills" value="2"/>
    <fieldval field="srcBookInf" value=" [ToS]"/>
    <arrayval field="cBonFtTot" index="5" value="2"/>
    <arrayval field="cBonFtTot" index="9" value="3"/>
    <arrayval field="cBonFtTot" index="13" value="4"/>
    <arrayval field="cBonFtTot" index="18" value="5"/>
    <arrayval field="cBonFtTot" index="1" value="1"/>
    <usesource source="TomeOfSecr"/>
    <tag group="ClassSkill" tag="skDiplo"/>
    <tag group="ClassSkill" tag="skHandleAn"/>
    <tag group="ClassSkill" tag="skIntim"/>
    <tag group="ClassSkill" tag="skKnowNobl"/>
    <tag group="ClassSkill" tag="skRide"/>
    <tag group="ClassSkill" tag="skSenseMot"/>
    <tag group="ClassSkill" tag="skSwim"/>
    <tag group="cWill" tag="Good"/>
    <tag group="Classes" tag="Knight" name="Knight"/>
    <tag group="cAttack" tag="Good"/>
    <tag group="cFort" tag="Good"/>
    <tag group="AgeColumn" tag="3"/>
    <tag group="fInclude" tag="fAnimAff"/>
    <tag group="fInclude" tag="fCleave"/>
    <tag group="fInclude" tag="fComRef"/>
    <tag group="fInclude" tag="fDiehard"/>
    <tag group="fInclude" tag="fGreatClv"/>
    <tag group="fInclude" tag="fGrtWepFoc"/>
    <tag group="fInclude" tag="fGrtWepSpc"/>
    <tag group="fInclude" tag="fImpInit"/>
    <tag group="fInclude" tag="fImpVitStr"/>
    <tag group="fInclude" tag="fIntProw"/>
    <tag group="fInclude" tag="fLeader"/>
    <tag group="fInclude" tag="fMountCom"/>
    <tag group="fInclude" tag="fPowerAtt"/>
    <tag group="fInclude" tag="fRideBy"/>
    <tag group="fInclude" tag="fSpirChar"/>
    <tag group="fInclude" tag="fTrample"/>
    <tag group="fInclude" tag="fVitStr"/>
    <tag group="fInclude" tag="fWepFoc"/>
    <tag group="fInclude" tag="fWepSpec"/>
    <tag group="AlgnReq" tag="Lawful"/>
    <tag group="ClsCountAs" tag="cHelpFtr"/>
    <tag group="FtCountAs" tag="Fighter"/>
    <tag group="cRef" tag="Poor"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="ClassRole" tag="Combat"/>
    <tag group="PackHelper" tag="ClsSrcAbr"/>
    <tag group="ClassSkill" tag="skClimb"/>
    <bootstrap thing="fArmHeavy"></bootstrap>
    <bootstrap thing="fWepMart"></bootstrap>
    <bootstrap thing="fArmShield"></bootstrap>
    <bootstrap thing="cKPres">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cCoCh">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cKHosp">
      <autotag group="ClSpecWhen" tag="1"/>
      </bootstrap>
    <bootstrap thing="cGallant">
      <autotag group="ClSpecWhen" tag="3"/>
      </bootstrap>
    <bootstrap thing="cKMounCom">
      <autotag group="ClSpecWhen" tag="4"/>
      </bootstrap>
    <bootstrap thing="cRallPre">
      <autotag group="ClSpecWhen" tag="5"/>
      </bootstrap>
    <bootstrap thing="cKProt">
      <autotag group="ClSpecWhen" tag="7"/>
      </bootstrap>
    <bootstrap thing="cKMounCom">
      <autotag group="ClSpecWhen" tag="8"/>
      </bootstrap>
    <bootstrap thing="cKChamp">
      <autotag group="ClSpecWhen" tag="9"/>
      </bootstrap>
    <bootstrap thing="cRallPre">
      <autotag group="ClSpecWhen" tag="11"/>
      </bootstrap>
    <bootstrap thing="cKMounCom">
      <autotag group="ClSpecWhen" tag="12"/>
      </bootstrap>
    <bootstrap thing="cUnshake">
      <autotag group="ClSpecWhen" tag="13"/>
      </bootstrap>
    <bootstrap thing="cRallPre">
      <autotag group="ClSpecWhen" tag="15"/>
      </bootstrap>
    <bootstrap thing="cKMounCom">
      <autotag group="ClSpecWhen" tag="16"/>
      </bootstrap>
    <bootstrap thing="cSturdy">
      <autotag group="ClSpecWhen" tag="17"/>
      </bootstrap>
    <bootstrap thing="cFearless">
      <autotag group="ClSpecWhen" tag="19"/>
      </bootstrap>
    <bootstrap thing="cKMounCom">
      <autotag group="ClSpecWhen" tag="20"/>
      </bootstrap>
    <bootstrap thing="fSimple"></bootstrap>
    <bootstrap thing="fArmLight"></bootstrap>
    <bootstrap thing="fArmMedium"></bootstrap>
    <eval phase="First" priority="10000"><![CDATA[
      ~ Reset the class name to remove the special "(ToS)" text
      field[livename].text = tagnames[Classes.?]]]></eval>
    </thing>
  </document>
