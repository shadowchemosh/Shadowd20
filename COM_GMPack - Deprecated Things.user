<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <loadonce key="COM_GMPack - Deprecated Things"/>
  <fileinfo>
    <info_author>
      Author:  Tim Shadow
      Email: shadowchemosh@yahoo.com</info_author>
    <info_history><![CDATA[
      January 15, 2015 Tim Shadow
      -Created new to hold Drepcated Things using the "Hidden" feature of HL.]]></info_history>
    </fileinfo>
  <thing id="pCBHeroGre" name="Heroism, Greater" description="This adjustment has been drepcated. Please re-add the official version instead.\n\nThis spell imbues a single creature with great bravery and morale in battle. The target gains a +4 morale bonus on attack rolls, saves, and skill checks, immunity to fear effects, and temporary hit points equal to your caster level (maximum 20)." compset="InPlay" uniqueness="useronce">
    <fieldval field="pMinimum" value="1"/>
    <fieldval field="pMaximum" value="20"/>
    <fieldval field="pDuration" value="1 min./level"/>
    <usesource source="srcCoBeAdj"/>
    <tag group="Helper" tag="AdjSpell" name="Spell Adjustment" abbrev="Spell Adjustment"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="xImmFear">
      <containerreq phase="First" priority="500"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      </bootstrap>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Give a Bonus to all weapons attacks
      #applybonus[BonMorale,hero.child[Attack],4]

      ~ Give bonus to saves
      #applybonus[BonMorale, hero.child[svAll], 4]

      ~ Give bonus to all skills
      #applybonus[BonMorale, hero.child[AllSkills], 4]]]></eval>
    <eval phase="Final" priority="10000" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Give Bonus HP
      herofield[tCurrentHP].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="puAbilRemN" name="Ability Score (Restore)" description="Restores a non-existant ability score." compset="InPlay">
    <usesource source="srcCoBeAdj"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="Attributes"/>
    <tag group="Adjustment" tag="Attribute"/>
    <eval phase="PreAttr" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~If no attribute's been chosen, there's nothing we can do
      doneif (field[pChosen].ischosen = 0)

      ~Remove ability score
      perform field[pChosen].chosen.delete[Helper.NoScore]]]></eval>
    </thing>
  <thing id="pAtkRngSpc" name="Attack Bonus (Ranged): Specific Weapon" description="Add an ranged attack bonus to a specific weapon." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <fieldval field="pMaximum" value="5"/>
    <usesource source="srcCoBeAdj"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="AttDam"/>
    <tag group="Adjustment" tag="YourWep"/>
    <eval phase="PreLevel" priority="6000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~if nothing's been chosen, there's nothing we can do
      doneif (field[pChosen].ischosen = 0)

      ~if the target weapon is a custom/magic weapon, find out what it's
      ~equivalant bonus is

      ~normally, our maximum is the incrementer's maximum field
      field[abValue2].value = field[pMaximum].value
      field[abValue].value = field[pAdjust].value
      ~if we're a custom/magic weapon, this spell can't take the effective
      ~total above +10
      if (field[pChosen].chosen.isgizmo <> 0) then
        field[abValue3].value = 10 - (field[pChosen].chosen.gizmo.child[gCustMagic].field[gCustEquiv].value - field[pChosen].chosen.gizmo.child[gCustMagic].field[gCustBonus].value)
        field[abValue2].value = minimum(field[abValue2].value, field[abValue3].value)
        field[abValue].value = minimum(field[abValue].value, field[abValue2].value)
        endif

      ~add bonus
      field[pChosen].chosen.field[wAttRanged].value = field[abValue].value]]></eval>
    </thing>
  <thing id="pAtkMleSpc" name="Deprecated" description="{B}{I}This adjustment has been deprecated. Please remove this and add &quot;Weapon Attack Bonus&quot;.{/I}{/b}\n\nAdd an melee attack bonus to a specific weapon." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <fieldval field="pMaximum" value="5"/>
    <usesource source="srcCoBeAdj"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjustment" tag="YourWep"/>
    <eval phase="PreLevel" priority="6000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~if nothing's been chosen, there's nothing we can do
      doneif (field[pChosen].ischosen = 0)

      ~if the target weapon is a custom/magic weapon, find out what it's
      ~equivalant bonus is

      ~normally, our maximum is the incrementer's maximum field
      field[abValue2].value = field[pMaximum].value
      field[abValue].value = field[pAdjust].value
      ~if we're a custom/magic weapon, this spell can't take the effective
      ~total above +10
      if (field[pChosen].chosen.isgizmo <> 0) then
        field[abValue3].value = 10 - (field[pChosen].chosen.gizmo.child[gCustMagic].field[gCustEquiv].value - field[pChosen].chosen.gizmo.child[gCustMagic].field[gCustBonus].value)
        field[abValue2].value = minimum(field[abValue2].value, field[abValue3].value)
        field[abValue].value = minimum(field[abValue].value, field[abValue2].value)
        endif

      ~add bonus
      field[pChosen].chosen.field[wAttBonus].value = field[abValue].value]]></eval>
    </thing>
  <thing id="pCBACInsig" name="Deprecated" description="{B}{I}This adjustment has been deprecated. Please remove this and add &quot;Armor Class, Type&quot;.{/I}{/b}\n\nSelect this adjustment to add a insight bonus to your armor class. This will not stack with other insight bonuses to AC." compset="InPlay">
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      
      ~ Add to our armor class
      hero.child[ArmorClass].field[BonInsight].value = maximum(field[pAdjust].value,hero.child[ArmorClass].field[BonInsight].value)]]></eval>
    </thing>
  <thing id="pCBACProfa" name="Deprecated" description="{B}{I}This adjustment has been deprecated. Please remove this and add &quot;Armor Class, Type&quot;.{/I}{/b}" compset="InPlay">
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      hero.child[ArmorClass].field[BonProfane].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pBAB" name="Deprecated" description="{B}{I}This adjustment has been deprecated. Please remove this and add &quot;Attack, Base Attack Bonus (BAB)&quot;.{/I}{/b}\n\nAdjust Base Attack Bonus." compset="InPlay">
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="First"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      hero.child[Attack].field[tAtkBase].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="pSplResBon" name="Deprecated" description="{B}{I}This adjustment has been deprecated as it was officially added to Hero Lab. Please remove this and add &quot;Spell Resistance&quot;.{/I}{/b}\n\nAdjust spell resistance.\n\n{b}Note{/b}: The adjustment is used to set the total spell resistance value." compset="InPlay">
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Apply Spell Resistance
      #applysr[field[pAdjust].value]]]></eval>
    </thing>
  <thing id="pCBRmClssk" name="Class Skill, Remove" description="Select this adjustment to remove a skill as a Class Skill for all classes." compset="InPlay">
    <fieldval field="pWhat" value="Class Skill"/>
    <usesource source="srcCoBeAdj"/>
    <tag group="Adjustment" tag="Skill" name="Skills" abbrev="Skills"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="Helper" tag="NoIncr" name="NoIncr" abbrev="NoIncr"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Add our chosen skill as a class skill for all classes.
      perform field[pChosen].chosen.linkage[varies].delete[ClassSkill.?]]]></eval>
    </thing>
  <thing id="pSpFlameBl" name="Flame Blade" description="A 3-foot-long, blazing beam of red-hot fire springs forth from your hand. You wield this blade-like beam as if it were a scimitar. Attacks with the flame blade are melee touch attacks. The blade deals 1d8 points of fire damage + 1 point per two caster levels (maximum +10). Since the blade is immaterial, your Strength modifier does not apply to the damage. A flame blade can ignite combustible materials such as parchment, straw, dry sticks, and cloth.\n\n{b}Note:{/b} Adjustment sets level of caster." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <fieldval field="pMaximum" value="20"/>
    <fieldval field="pWhat" value="Level of caster"/>
    <tag group="Helper" tag="AdjSpell"/>
    <tag group="Custom" tag="FlameBlade" name="Flame Blade"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <bootstrap thing="wScimitar">
      <containerreq phase="First" priority="250"><![CDATA[fieldval:pIsOn <> 0]]></containerreq>
      <autotag group="wMaxStrPen" tag="0"/>
      <autotag group="Custom" tag="FlameBlade"/>
      <autotag group="Helper" tag="FixSizeDmg"/>
      <autotag group="wMaxStrBon" tag="0"/>
      <assignval field="livename" value="Flame Blade (fire)"/>
      </bootstrap>
    <eval phase="First"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      foreach pick in hero where "thingid.wScimitar & Custom.FlameBlade"
        eachpick.field[wDamBonus].value = round(field[pAdjust].value/2,0,0)
        perform eachpick.delete[wMain.?]
        perform eachpick.assign[wMain.1d8_6]
      nexteach]]></eval>
    </thing>
  <thing id="puNumHands" name="Number of Hands" description="Changes the number of hands the creature has." compset="InPlay" uniqueness="useronce">
    <fieldval field="pMaximum" value="99"/>
    <fieldval field="pMinimum" value="-99"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="101"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      herofield[tNumHands].value += field[pAdjust].value]]></eval>
    <eval phase="First" index="2">field[pMinimum].value = - herofield[tNumHands].value</eval>
    </thing>
  <thing id="puRemvWep" name="Remove Weapon" description="Removes weapon." compset="InPlay">
    <usesource source="srcCoBeAdj"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If we're not chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      perform field[pChosen].chosen.assign[Hide.Weapon]]]></eval>
    </thing>
  <thing id="puUndersiz" name="Undersized Weapons" description="Hero can use smaller weapons without penalty." compset="InPlay">
    <usesource source="srcCoBeAdj"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="PreLevel" priority="10000">perform hero.findchild[BaseRace].setfocus
      perform focus.assign[Helper.Undersized]</eval>
    </thing>
  <thing id="puWeapChN" name="Weapon: Change Name" description="Change the name of the selected weapon via. the duration field." compset="InPlay">
    <usesource source="srcCoBeAdj"/>
    <tag group="Helper" tag="AdjInfo" name="AdjInfo" abbrev="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="ProductId" tag="HLCommunit"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Adjustment" tag="YourWep" name="Current Weapons" abbrev="Current Weapons"/>
    <eval phase="Final" priority="20500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      field[pChosen].chosen.field[livename].text = field[pDuration].text]]></eval>
    </thing>
  <thing id="rauAmlSecn" name="Second Race" compset="RaceSpec">
    <fieldval field="usrCandid1" value="component.BaseRace"/>
    <usesource source="srcAdvBest"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <eval phase="First" priority="10"><![CDATA[
      ~ getout if we haven't chosen yet
      doneif (field[usrChosen1].ischosen = 0)

      ~ find type of races
      var type1 as string
      type1 = hero.findchild[BaseRace].tagabbrevs[HasType.?]
      var type2 as string
      type2 = field[usrChosen1].chosen.tagabbrevs[HasType.?]

      var newtype as string

      ~ aberration
      if (compare(type1,"Aberration")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpAberr"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpAberr"
          endif

      ~ animal
      elseif (compare(type1,"Animal")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpAberr"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpAnimal"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpMonHuman"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpMonHuman"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpVermin"
          endif

      ~ construct
      elseif (compare(type1,"Construct")=0) then
          newtype = "tpConst"

      ~ dragon
      elseif (compare(type1,"Dragon")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpDragon"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpDragon"
          endif

      ~ fey
      elseif (compare(type1,"Fey")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpAberr"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpAberr"
          endif

      ~ humanoid
      elseif (compare(type1,"Humanoid")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpAberr"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpMonHuman"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpHumanoid"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpMonHuman"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpAberr"
          endif

      ~ magical beast
      elseif (compare(type1,"Magical Beast")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpMagBeast"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpAberr"
          endif

      ~ monstrous humanoid
      elseif (compare(type1,"Monstrous Humanoid")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpAberr"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpMonHuman"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpMonHuman"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpMonHuman"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpAberr"
          endif

      ~ ooze
      elseif (compare(type1,"Ooze")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpAberr"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpOoze"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpAberr"
          endif

      ~ outsider
      elseif (compare(type1,"Outsider")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpOutsider"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpOutsider"
          endif

      ~ plant
      elseif (compare(type1,"Plant")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpPlant"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpFey"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpPlant"
          endif

      ~ undead
      elseif (compare(type1,"Undead")=0) then
          if (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          else
              newtype = "tpUndead"
          endif

      ~ vermin
      elseif (compare(type1,"Vermin")=0) then
          if (compare(type2,"Aberration")=0) then 
               newtype = "tpAberr"
          elseif (compare(type2,"Animal")=0) then 
              newtype = "tpVermin"
          elseif (compare(type2,"Construct")=0) then 
              newtype = "tpConst"
          elseif (compare(type2,"Dragon")=0) then 
              newtype = "tpDragon"
          elseif (compare(type2,"Fey")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Humanoid")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Magical Beast")=0) then 
              newtype = "tpMagBeast"
          elseif (compare(type2,"Monstrous Humanoid")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Ooze")=0) then 
              newtype = "tpAberr"
          elseif (compare(type2,"Outsider")=0) then 
              newtype = "tpOutsider"
          elseif (compare(type2,"Plant")=0) then 
              newtype = "tpPlant"
          elseif (compare(type2,"Undead")=0) then 
              newtype = "tpUndead"
          elseif (compare(type2,"Vermin")=0) then 
              newtype = "tpVermin"
          endif
      endif

      perform hero.child[tmuAmalgam].assignstr["OverType." & newtype]

      var newHDtyp as number
      ~ change HD
      if (compare(newtype,"tpAberr")=0) then 
         newHDtyp = 8
      elseif (compare(newtype,"tpAnimal")=0) then 
         newHDtyp = 8
      elseif (compare(newtype,"tpConst")=0) then 
         newHDtyp = 10
      elseif (compare(newtype,"tpDragon")=0) then 
         newHDtyp = 12
      elseif (compare(newtype,"tpFey")=0) then 
         newHDtyp = 6
      elseif (compare(newtype,"tpHumanoid")=0) then 
         newHDtyp = 8
      elseif (compare(newtype,"tpMagBeast")=0) then 
         newHDtyp = 10
      elseif (compare(newtype,"tpMonHuman")=0) then 
         newHDtyp = 10
      elseif (compare(newtype,"tpOoze")=0) then 
         newHDtyp = 8
      elseif (compare(newtype,"tpOutsider")=0) then 
         newHDtyp = 10
      elseif (compare(newtype,"tpPlant")=0) then 
         newHDtyp = 8
      elseif (compare(newtype,"tpUndead")=0) then 
         newHDtyp = 8
      elseif (compare(newtype,"tpVermin")=0) then 
         newHDtyp = 8
      endif]]></eval>
          <eval phase="First" priority="20" index="2"><![CDATA[~ getout if we haven't chosen yet
      doneif (field[usrChosen1].ischosen = 0)

      ~ get racial HD
      var hd1 as number
      var hd2 as number
      var newHD as number
      hd1 = hero.findchild[BaseRace].field[rHitDice].value
      hd2 = field[usrChosen1].chosen.field[rHitDice].value
      newHD = maximum(hd1,hd2)

      ~ set new racial HD
      hero.findchild[BaseRace].field[rHitDice].value = newHD]]></eval>
          <eval phase="First" priority="50" index="3"><![CDATA[~ getout if we haven't chosen yet
      doneif (field[usrChosen1].ischosen = 0)

      ~ get sizes
      var sz1 as number
      var sz2 as number
      sz1 = hero.findchild[BaseRace].tagvalue[RaceSize.?]
      sz2 = field[usrChosen1].chosen.tagvalue[RaceSize.?]

      ~ adjust for comparison
      if (sz1 > 10) then 
        sz1 = 10 - sz1
      endif
      if (sz2 > 10) then 
        sz2 = 10 - sz2
      endif

      var newSize as string
      var modAC as number
      var modSTR as number
      var modDEX as number
      var modCON as number

      if (sz1 < sz2) then

      if (sz2 = -3) then
        newSize = "RaceSize.Dimin13"
      elseif (sz2 = -2) then
        newSize = "RaceSize.Tiny12"
      elseif (sz2 = -1) then
        newSize = "RaceSize.Small11"
      elseif (sz2 = 0) then
        newSize = "RaceSize.Medium0"
      elseif (sz2 = 1) then
        newSize = "RaceSize.Large1"
      elseif (sz2 = 2) then
        newSize = "RaceSize.Huge2"
      elseif (sz2 = 3) then
        newSize = "RaceSize.Gargant3"
      elseif (sz2 >= 4) then
        newSize = "RaceSize.Colossal4"
      endif

      ~ change size
      perform hero.findchild[BaseRace].delete[RaceSize.?]
      perform hero.findchild[BaseRace].assignstr[newSize]

      endif

      ~ get ability scores
      var STR1 as number
      var STR2 as number
      var DEX1 as number
      var DEX2 as number
      var CON1 as number
      var CON2 as number
      var INT1 as number
      var INT2 as number
      var WIS1 as number
      var WIS2 as number
      var CHA1 as number
      var CHA2 as number

      if (hero.findchild[BaseRace].tagcount[NoScore.aSTR] <> 0) then
        STR1 = -10
      else
        STR1 = hero.findchild[BaseRace].field[rSTR].value
      endif
      if (field[usrChosen1].chosen.tagcount[NoScore.aSTR] <> 0) then
        STR2 = -10
      else
        STR2 = field[usrChosen1].chosen.field[rSTR].value
      endif
      if (hero.findchild[BaseRace].tagcount[NoScore.aDEX] <> 0) then
        DEX1 = -10
      else
        DEX1 = hero.findchild[BaseRace].field[rDEX].value
      endif
      if (field[usrChosen1].chosen.tagcount[NoScore.aDEX] <> 0) then
        DEX2 = -10
      else
        DEX2 = field[usrChosen1].chosen.field[rDEX].value
      endif
      if (hero.findchild[BaseRace].tagcount[NoScore.aCON] <> 0) then
        CON1 = -10
      else
        CON1 = hero.findchild[BaseRace].field[rCON].value
      endif
      if (field[usrChosen1].chosen.tagcount[NoScore.aCON] <> 0) then
        CON2 = -10
      else
        CON2 = field[usrChosen1].chosen.field[rCON].value
      endif
      if (hero.findchild[BaseRace].tagcount[NoScore.aINT] <> 0) then
        INT1 = -10
      else
        INT1 = hero.findchild[BaseRace].field[rINT].value
      endif
      if (field[usrChosen1].chosen.tagcount[NoScore.aINT] <> 0) then
        INT2 = -10
      else
        INT2 = field[usrChosen1].chosen.field[rINT].value
      endif
      if (hero.findchild[BaseRace].tagcount[NoScore.aWIS] <> 0) then
        WIS1 = -10
      else
        WIS1 = hero.findchild[BaseRace].field[rWIS].value
      endif
      if (field[usrChosen1].chosen.tagcount[NoScore.aWIS] <> 0) then
        WIS2 = -10
      else
        WIS2 = field[usrChosen1].chosen.field[rWIS].value
      endif
      if (hero.findchild[BaseRace].tagcount[NoScore.aCHA] <> 0) then
        CHA1 = -10
      else
        CHA1 = hero.findchild[BaseRace].field[rCHA].value
      endif
      if (field[usrChosen1].chosen.tagcount[NoScore.aCHA] <> 0) then
        CHA2 = -10
      else
        CHA2 = field[usrChosen1].chosen.field[rCHA].value
      endif

      ~ get natural ACs
      var AC1 as number
      var AC2 as number

      AC1 = hero.findchild[BaseRace].field[rAC].value
      AC2 = field[usrChosen1].chosen.field[rAC].value






      ~ size change adjustments for averaging
      ~ inital fine
      if (sz1 <= -4) then
        if (sz2 <= -4) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        elseif (sz2 = -3) then
           modAC = 0
           modSTR = 0
           modDEX = -2
           modCON = 0
        elseif (sz2 = -2) then
           modAC = 0
           modSTR = 2
           modDEX = -4
           modCON = 0
        elseif (sz2 = -1) then
           modAC = 0
           modSTR = 6
           modDEX = -6
           modCON = 0
        elseif (sz2 = 0) then
           modAC = 0
           modSTR = 10
           modDEX = -8
           modCON = 2
        elseif (sz2 = 1) then
           modAC = 2
           modSTR = 18
           modDEX = -10
           modCON = 6
        elseif (sz2 = 2) then
           modAC = 5
           modSTR = 26
           modDEX = -12
           modCON = 10
        elseif (sz2 = 3) then
           modAC = 9
           modSTR = 34
           modDEX = -12
           modCON = 14
        elseif (sz2 >= 4) then
           modAC = 14
           modSTR = 42
           modDEX = -12
           modCON = 18
        endif

      ~ inital diminutive
      elseif (sz1 = -3) then
        if (sz2 <= -4) then
           modAC = 0
           modSTR = 0
           modDEX = -2
           modCON = 0
        elseif (sz2 = -3) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        elseif (sz2 = -2) then
           modAC = 0
           modSTR = 2
           modDEX = -2
           modCON = 0
        elseif (sz2 = -1) then
           modAC = 0
           modSTR = 6
           modDEX = -4
           modCON = 0
        elseif (sz2 = 0) then
           modAC = 0
           modSTR = 10
           modDEX = -6
           modCON = 2
        elseif (sz2 = 1) then
           modAC = 2
           modSTR = 18
           modDEX = -8
           modCON = 6
        elseif (sz2 = 2) then
           modAC = 5
           modSTR = 26
           modDEX = -10
           modCON = 10
        elseif (sz2 = 3) then
           modAC = 9
           modSTR = 34
           modDEX = -12
           modCON = 14
        elseif (sz2 >= 4) then
           modAC = 14
           modSTR = 42
           modDEX = -12
           modCON = 18
        endif

      ~ inital tiny
      elseif (sz1 = -2) then
        if (sz2 <= -4) then
           modAC = 0
           modSTR = 2
           modDEX = -4
           modCON = 0
        elseif (sz2 = -3) then
           modAC = 0
           modSTR = 2
           modDEX = -2
           modCON = 0
        elseif (sz2 = -2) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        elseif (sz2 = -1) then
           modAC = 0
           modSTR = 4
           modDEX = -2
           modCON = 0
        elseif (sz2 = 0) then
           modAC = 0
           modSTR = 8
           modDEX = -4
           modCON = 2
        elseif (sz2 = 1) then
           modAC = 2
           modSTR = 16
           modDEX = -6
           modCON = 6
        elseif (sz2 = 2) then
           modAC = 5
           modSTR = 24
           modDEX = -8
           modCON = 10
        elseif (sz2 = 3) then
           modAC = 9
           modSTR = 32
           modDEX = -8
           modCON = 14
        elseif (sz2 >= 4) then
           modAC = 14
           modSTR = 40
           modDEX = -8
           modCON = 18
        endif

      ~ inital small
      elseif (sz1 = -1) then
        if (sz2 <= -4) then
           modAC = 0
           modSTR = 6
           modDEX = -6
           modCON = 0
        elseif (sz2 = -3) then
           modAC = 0
           modSTR = 6
           modDEX = -4
           modCON = 0
        elseif (sz2 = -2) then
           modAC = 0
           modSTR = 4
           modDEX = -2
           modCON = 0
        elseif (sz2 = -1) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        elseif (sz2 = 0) then
           modAC = 0
           modSTR = 4
           modDEX = -2
           modCON = 2
        elseif (sz2 = 1) then
           modAC = 2
           modSTR = 12
           modDEX = -4
           modCON = 6
        elseif (sz2 = 2) then
           modAC = 5
           modSTR = 20
           modDEX = -6
           modCON = 10
        elseif (sz2 = 3) then
           modAC = 9
           modSTR = 28
           modDEX = -6
           modCON = 14
        elseif (sz2 >= 4) then
           modAC = 14
           modSTR = 36
           modDEX = -6
           modCON = 18
        endif

      ~ inital medium
      elseif (sz1 = 0) then
        if (sz2 <= -4) then
           modAC = 0
           modSTR = 10
           modDEX = -8
           modCON = 2
        elseif (sz2 = -3) then
           modAC = 0
           modSTR = 10
           modDEX = -6
           modCON = 2
        elseif (sz2 = -2) then
           modAC = 0
           modSTR = 8
           modDEX = -4
           modCON = 2
        elseif (sz2 = -1) then
           modAC = 0
           modSTR = 4
           modDEX = -2
           modCON = 2
        elseif (sz2 = 0) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        elseif (sz2 = 1) then
           modAC = 2
           modSTR = 8
           modDEX = -2
           modCON = 4
        elseif (sz2 = 2) then
           modAC = 5
           modSTR = 16
           modDEX = -4
           modCON = 8
        elseif (sz2 = 3) then
           modAC = 9
           modSTR = 24
           modDEX = -4
           modCON = 12
        elseif (sz2 >= 4) then
           modAC = 14
           modSTR = 32
           modDEX = -4
           modCON = 16
        endif

      ~ inital large
      elseif (sz1 = 1) then
        if (sz2 <= -4) then
           modAC = 2
           modSTR = 18
           modDEX = -10
           modCON = 6
        elseif (sz2 = -3) then
           modAC = 2
           modSTR = 18
           modDEX = -8
           modCON = 6
        elseif (sz2 = -2) then
           modAC = 2
           modSTR = 16
           modDEX = -6
           modCON = 6
        elseif (sz2 = -1) then
           modAC = 2
           modSTR = 12
           modDEX = -4
           modCON = 6
        elseif (sz2 = 0) then
           modAC = 2
           modSTR =8
           modDEX = -2
           modCON = 4
        elseif (sz2 = 1) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        elseif (sz2 = 2) then
           modAC = 3
           modSTR = 8
           modDEX = -2
           modCON = 4
        elseif (sz2 = 3) then
           modAC = 7
           modSTR = 16
           modDEX = -2
           modCON = 8
        elseif (sz2 >= 4) then
           modAC = 12
           modSTR = 24
           modDEX = -2
           modCON = 12
        endif

      ~ inital huge
      elseif (sz1 = 2) then
        if (sz2 <= -4) then
           modAC = 5
           modSTR = 26
           modDEX = -12
           modCON = 10
        elseif (sz2 = -3) then
           modAC = 5
           modSTR = 26
           modDEX = -10
           modCON = 10
        elseif (sz2 = -2) then
           modAC = 5
           modSTR = 24
           modDEX = -8
           modCON = 10
        elseif (sz2 = -1) then
           modAC = 5
           modSTR = 20
           modDEX = -6
           modCON = 10
        elseif (sz2 = 0) then
           modAC = 5
           modSTR = 16
           modDEX = -4
           modCON = 8
        elseif (sz2 = 1) then
           modAC = 3
           modSTR = 8
           modDEX = -2
           modCON = 4
        elseif (sz2 = 2) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        elseif (sz2 = 3) then
           modAC = 4
           modSTR = 8
           modDEX = 0
           modCON = 4
        elseif (sz2 >= 4) then
           modAC = 9
           modSTR = 16
           modDEX = 0
           modCON = 8
        endif

      ~ inital gargantuan
      elseif (sz1 = 3) then
        if (sz2 <= -4) then
           modAC = 9
           modSTR = 34
           modDEX = -12
           modCON = 14
        elseif (sz2 = -3) then
           modAC = 9
           modSTR = 34
           modDEX = -12
           modCON = 4
        elseif (sz2 = -2) then
           modAC = 9
           modSTR = 32
           modDEX = -12
           modCON = 14
        elseif (sz2 = -1) then
           modAC = 9
           modSTR = 28
           modDEX = -6
           modCON = 14
        elseif (sz2 = 0) then
           modAC = 9
           modSTR = 23
           modDEX = -4
           modCON = 12
        elseif (sz2 = 1) then
           modAC = 7
           modSTR = 16
           modDEX = -2
           modCON = 8
        elseif (sz2 = 2) then
           modAC = 4
           modSTR = 8
           modDEX = 0
           modCON = 4
        elseif (sz2 = 3) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        elseif (sz2 >= 4) then
           modAC = 5
           modSTR = 8
           modDEX = 0
           modCON = 4
        endif

      ~ inital colossal
      elseif (sz1 >= 4) then
        if (sz2 <= -4) then
           modAC = 14
           modSTR = 42
           modDEX = -12
           modCON = 18
        elseif (sz2 = -3) then
           modAC = 14
           modSTR = 42
           modDEX = -12
           modCON = 18
        elseif (sz2 = -2) then
           modAC = 14
           modSTR = 40
           modDEX = -8
           modCON = 18
        elseif (sz2 = -1) then
           modAC = 14
           modSTR = 36
           modDEX = -6
           modCON = 18
        elseif (sz2 = 0) then
           modAC = 14
           modSTR = 32
           modDEX = -4
           modCON = 16
        elseif (sz2 = 1) then
           modAC = 12
           modSTR = 34
           modDEX = -2
           modCON = 12
        elseif (sz2 = 2) then
           modAC = 9
           modSTR = 16
           modDEX = 0
           modCON = 8
        elseif (sz2 = 3) then
           modAC = 5
           modSTR = 8
           modDEX = 0
           modCON = 4
        elseif (sz2 >= 4) then
           modAC = 0
           modSTR = 0
           modDEX = 0
           modCON = 0
        endif

      endif

      ~ modify race abilities scores and AC

      var newSTR as number
      var newCON as number
      var newDEX as number
      var newINT as number
      var newWIS as number
      var newCHA as number
      var newAC as number


      newSTR = (STR1 + STR2 + modSTR)/2
      newCON = (CON1 + CON2 + modCON)/2
      newINT = (INT1 + INT2)/2
      newWIS = (WIS1 + WIS2)/2
      newCHA = (CHA1 + CHA2)/2
      if (DEX1 < DEX2) then
        newDEX = (maximum(DEX1 + modDEX,-9) + DEX2)/2
      elseif (DEX1 > DEX2) then
        newDEX = (DEX1 + maximum(DEX2 + modDEX,-9))/2
      else
        newDEX = (DEX1 + DEX2 + modDEX)/2
      endif

      if (newSTR < 0) then
        newSTR = round(newSTR,0,1)
      else
        newSTR = round(newSTR,0,-1)
      endif

      if (newDEX < 0) then
        newDEX = round(newDEX,0,1)
      else
        newDEX = round(newDEX,0,-1)
      endif

      if (newCON < 0) then
        newCON = round(newCON,0,1)
      else
        newCON = round(newCON,0,-1)
      endif

      if (newINT < 0) then
        newINT = round(newINT,0,1)
      else
        newINT = round(newINT,0,-1)
      endif

      if (newWIS < 0) then
        newWIS = round(newWIS,0,1)
      else
        newWIS = round(newWIS,0,-1)
      endif

      if (newCHA < 0) then
        newCHA = round(newCHA,0,1)
      else
        newCHA = round(newCHA,0,-1)
      endif

      newAC = (AC1 + AC2 + modAC)/2
      newAC = round(newAC,0,-1)


      ~ assign values
      hero.findchild[BaseRace].field[rSTR].value = newSTR
      hero.findchild[BaseRace].field[rDEX].value = newDEX
      hero.findchild[BaseRace].field[rCON].value = newCON
      hero.findchild[BaseRace].field[rINT].value = newINT
      hero.findchild[BaseRace].field[rWIS].value = newWIS
      hero.findchild[BaseRace].field[rCHA].value = newCHA
      hero.findchild[BaseRace].field[rAC].value = newAC

      ~ noscores

      var noSTR as number
      var noDEX as number
      var noWIS as number
      var noCON as number
      var noINT as number
      var noCHA as number

      noSTR = hero.findchild[BaseRace].tagcount[NoScore.aSTR] * field[usrChosen1].chosen.tagcount[NoScore.aSTR]
      noDEX = hero.findchild[BaseRace].tagcount[NoScore.aDEX] * field[usrChosen1].chosen.tagcount[NoScore.aDEX]
      noCON = hero.findchild[BaseRace].tagcount[NoScore.aCON] * field[usrChosen1].chosen.tagcount[NoScore.aCON]
      noINT = hero.findchild[BaseRace].tagcount[NoScore.aINT] * field[usrChosen1].chosen.tagcount[NoScore.aINT]
      noWIS = hero.findchild[BaseRace].tagcount[NoScore.aWIS] * field[usrChosen1].chosen.tagcount[NoScore.aWIS]
      noCHA = hero.findchild[BaseRace].tagcount[NoScore.aCHA] * field[usrChosen1].chosen.tagcount[NoScore.aCHA]

      ~ clear out noscores in base race
      perform hero.findchild[BaseRace].delete[NoScore.?]

      ~ if both base and second race have no score, reapply it.
      if (noSTR <> 0) then
        perform hero.findchild[BaseRace].assign[NoScore.aSTR]
      endif
      if (noDEX <> 0) then
        perform hero.findchild[BaseRace].assign[NoScore.aDEX]
      endif
      if (noCON <> 0) then
        perform hero.findchild[BaseRace].assign[NoScore.aCON]
      endif
      if (noINT <> 0) then
        perform hero.findchild[BaseRace].assign[NoScore.aINT]
      endif
      if (noWIS <> 0) then
        perform hero.findchild[BaseRace].assign[NoScore.aWIS]
      endif
      if (noCHA <> 0) then
        perform hero.findchild[BaseRace].assign[NoScore.aCHA]
      endif]]></eval>
    </thing>
  <thing id="tmuAmalgam" name="Amalgam" description="An amalgam is two different monsters brought together into one being by either magic or selective breeding. The amalgam template can be used to create a new race to replace a standard one, or new creatures resulting from a crossbreeding experiment, or a series of monsters influenced by a god or demon, or even a unique creature created by a magical accident." compset="Template" uniqueness="unique">
    <fieldval field="tmInfHD" value="Change to appropiate for new type"/>
    <usesource source="srcAdvBest"/>
    <tag group="ClVaryName" tag="AppNoComma"/>
    <tag group="TemplHelp" tag="Inherited"/>
    <tag group="TemplHelp" tag="Acquired"/>
    <bootstrap thing="rauAmlSecn"></bootstrap>
    </thing>
  <thing id="JBDrdGhoul" name="Dread Ghoul" description="Eaters of the dead that hunger for the living, the first ghouls were the undead remains of humans who had indulged in unwholesome pleasures, such as cannibalism or necrophilia, in life. The original dread ghouls came into being because they had exhorted or compelled others to such acts while alive. Although both types of undead can create more of their kind, dread ghouls maintain their role as leaders of their normal kindred.\n\nAlso called ghoul lords or ghuls, dread ghouls are to ghouls what dread ghasts are to ghasts. Both dread creatures can command normal ghouls, and this situation often creates conflict. Because they cannot command normal ghasts, however, dread ghouls often find themselves on the losing side of such battles.\n\nA dread ghoul looks like a gray and emaciated version of its living form. Its limbs end in terrible claws caked with grave dirt and the rotting flesh of its last disinterred meal. A dread ghoul&apos;s eyes glow dimly with an angry light, and its hunger for flesh is clearly written on its features." compset="Template" uniqueness="unique">
    <fieldval field="tmSTR" value="2"/>
    <fieldval field="tmDEX" value="4"/>
    <fieldval field="tmINT" value="2"/>
    <fieldval field="tmWIS" value="4"/>
    <fieldval field="tmCHA" value="2"/>
    <fieldval field="tmReplHD" value="8"/>
    <fieldval field="tmInfHD" value="Change all HD to d8."/>
    <fieldval field="tmAC" value="2"/>
    <arrayval field="tmCRArray" index="0" value="1"/>
    <usesource source="srcAdvBest"/>
    <tag group="Alignment" tag="Evil" name="Evil" abbrev="E"/>
    <tag group="TypeAndAug" tag="tpUndead"/>
    <tag group="TemplHelp" tag="Acquired"/>
    <tag group="Alignment" tag="Chaotic" name="Chaotic" abbrev="C"/> <tag group="ProductId" tag="HLCommunit"/> <bootstrap thing="wBite">
      <autotag group="Value" tag="1"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <autotag group="Value" tag="2"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <bootstrap thing="typUndead"></bootstrap>
    <bootstrap thing="JBDrdGhlSp"></bootstrap>
    <bootstrap thing="JBCmdGhl"></bootstrap>
    <bootstrap thing="xClimb">
      <autotag group="Value" tag="5"/>
      </bootstrap>
    <bootstrap thing="xScent"></bootstrap>
    <bootstrap thing="xChanRes">
      <autotag group="Value" tag="2"/>
      </bootstrap>
    <bootstrap thing="raParalysi">
      <assignval field="livename" value="Paralysis (1d4+1 rounds)"/>
      </bootstrap>
    <bootstrap thing="fWepFin"></bootstrap>
    <eval phase="PreLevel" priority="10000">~ We have bonuses to many skills
      #skillbonus[skSurvival] += 8
      #skillbonus[skClimb] += 8</eval>
    <eval phase="Final" priority="14000" index="2">~ Set our climb speed
      var speed as number
      speed = hero.child[Speed].field[tSpeed].value
      hero.child[xClimb].field[abValue].value = maximum(hero.child[xClimb].field[abValue].value, speed)</eval>
    </thing>
  <thing id="JBDrdGhast" name="Dread Ghast" description="The first ghouls were humans who rose as undead because they had indulged in unwholesome pleasures in life. the original ghasts rose as undead for similar reasons, but their sins were of vaster scale. A man who broke a taboo by consuming dead bodies to avoid starvation might rise as a ghoul, but a man who murdered his wife and children, then cooked them up as a delicious meal for himself and his mistress would instead rise as a ghast. Cursed with a terrible stench of death and corruption that serves as a warning to the living, the ghast&apos;s greater sins in life grant it greater power in undeath.\n\nThe first dread ghasts were villans of still broader scope. Leaders in life, they influenced the actions of scores of others and led them to participate in a terrible atrocities. today, the dread ghast &quot;race&quot; of undead perpetuates itself though the transmission of vile power. A creature killed but not consumed by a dread ghast rises as another dread ghast. Though the new dread ghast is not under its creator&apos;s control, it usually succumbs to its progenitor&apos;s exhortations to perform the same sorts of evil acts that led to the creation of the &quot;race&quot;. But dread ghasts are careful with this power. Since they have no control over the other dread ghasts they create, they consume the bodies of any victims that seem likely to be more powerful in undeath than themselves.\n\nA dread ghast appears much as it did in life. Its decayed and rotting flesh clings tightly to its bones, and its eyes burn with unholy light. Dread ghasts often have long teeth and wicked claws. Their long, dry tongues loll out of their mouths, making rasping sounds when dragged against their fangs." compset="Template" uniqueness="unique">
    <fieldval field="tmInfHD" value="Change all HD to d8."/>
    <fieldval field="tmReplHD" value="8"/>
    <fieldval field="tmDEX" value="4"/>
    <fieldval field="tmINT" value="2"/>
    <fieldval field="tmWIS" value="4"/>
    <fieldval field="tmAC" value="4"/>
    <fieldval field="tmSTR" value="4"/>
    <fieldval field="tmCHA" value="6"/>
    <arrayval field="tmCRArray" index="0" value="1"/>
    <usesource source="srcAdvBest"/>
    <tag group="TemplHelp" tag="Acquired"/>
    <tag group="AlgnReq" tag="ChaotEvil"/>
    <tag group="TypeAndAug" tag="tpUndead" name="Undead" abbrev="Undead"/> <tag group="ProductId" tag="HLCommunit"/> <bootstrap thing="xClimb">
      <autotag group="Value" tag="5"/>
      </bootstrap>
    <bootstrap thing="xChanRes">
      <autotag group="Value" tag="4"/>
      </bootstrap>
    <bootstrap thing="raParalysi">
      <assignval field="livename" value="Paralysis (1d4+1 rounds)"/>
      </bootstrap>
    <bootstrap thing="fWepFin"></bootstrap>
    <bootstrap thing="JBDrdGhaSp"></bootstrap>
    <bootstrap thing="JBDGhaSten">
      <assignval field="livename" value="Stench (20 feet, 1d6+4 minutes)"/>
      </bootstrap>
    <bootstrap thing="raGhoDisea"></bootstrap>
    <bootstrap thing="JBUADrdGha"></bootstrap>
    <bootstrap thing="wBite">
      <autotag group="Value" tag="1"/>
      <autotag group="wMain" tag="1d6_5"/>
      </bootstrap>
    <bootstrap thing="wClaw">
      <autotag group="Value" tag="2"/>
      <autotag group="wMain" tag="1d4_4"/>
      </bootstrap>
    <bootstrap thing="typUndead"></bootstrap>
    <eval phase="PreLevel" priority="10000">~ We have bonuses to many skills
      #skillbonus[skAcrobat] += 10
      #skillbonus[skClimb] += 8</eval>
    <eval phase="Final" priority="14000" index="2">~ Set our climb speed
      var speed as number
      speed = hero.child[Speed].field[tSpeed].value
      hero.child[xClimb].field[abValue].value = maximum(hero.child[xClimb].field[abValue].value, speed)</eval>
    </thing>




  <hidden id="pCBHeroGre"/>
  <hidden id="puAbilRemN"/>
  <hidden id="pAtkRngSpc"/>
  <hidden id="pAtkMleSpc"/>
  <hidden id="pCBACInsig"/>
  <hidden id="pCBACProfa"/>
  <hidden id="pBAB"/>
  <hidden id="pSplResBon"/>
  <hidden id="pCBRmClssk"/>
  <hidden id="pSpFlameBl"/>
  <hidden id="puNumHands"/>
  <hidden id="puRemvWep"/>
  <hidden id="puUndersiz"/>
  <hidden id="puWeapChN"/>
  <hidden id="rauAmlSecn"/>
  <hidden id="tmuAmalgam"/>

  <hidden id="JBDrdGhoul"/>
  <hidden id="JBDrdGhast"/>


  </document>