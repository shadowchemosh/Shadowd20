<?xml version="1.0" encoding="ISO-8859-1"?>
<document signature="Hero Lab Data">
  <loadonce key="COM_BasicPack - Procedures Validate"/>
  <fileinfo>
    <info_author><![CDATA[
      Tim Shadow
      Email: ShadowChemosh@yahoo.com
      ]]>
    </info_author>
  </fileinfo>

  <procedure id="HaveSpell" scripttype="validate"><![CDATA[
    ~ This procedure checks to see if the past in spells exist on
    ~ any of the characters class spell list. If it does this
    ~ returns HaveSpell variable with a 1 for TRUE.
    ~ ===How to use this Procedure===
    ~ var SpellID as String
    ~ var HaveSpell as number
    ~ SpellID = "spCureLig1"
    ~ Call HaveSpell
    ~ @valid = HaveSpell
    ~ Example two many spells being checked
    ~ var SpellID as String
    ~ var HaveSpell as number
    ~ SpellID = "spSummMon1|spSummMon2|spSummMon3|spSummMon4|spSummMon5|spSummMon6|spSummMon7|spSummMon8|spSummMon9|spSummNat1|spSummNat2|spSummNat3|spSummNat4|spSummNat5|spSummNat6|spSummNat7|spSummNat8|spSummNat9"
    ~ Call HaveSpell
    ~ @valid = HaveSpell

    var HaveSpell as number
    var SpellID as string
    var s2classes as string
    ~ Init fields here
    HaveSpell = 0

    ~ Add thingid to the spell id passed us
    SpellID = "thingid." & SpellID
    ~ replace the | with |thingid. tag groups
    SpellID  = replace(SpellID,"|","|thingid.",0)

    ~ Get the classes that are valid for the spell ID(s) passed to us
    foreach thing in BaseSpell where SpellID
      ~ Once we are valid no reason to keep checking classes.
      ~ But no "Leave" or iter commands exist here to get me
      ~ out of the foreach loop. =(
      If (HaveSpell = 0) Then

         ~ only do anything if we are a spell with classes
         if (eachthing.tagis[sClass.?] <> 0) then

            ~ Build a search string of all class tags
            s2classes = eachthing.tagids[sClass.?,"|"]

            ~ Find the first class helper that matches to the spell classes
            If (hero.findchild[BaseClHelp,s2classes].field[cTotalLev].value <> 0) Then
              HaveSpell = 1
            Endif

         Endif

      Endif
    nexteach
    ]]>
  </procedure>


  <procedure id="CntMartWea" scripttype="validate"><![CDATA[
    ~ This procedure counts the number of martial weapons a hero has
    ~ ===How to use this Procedure===
    ~ var CntMartWea as number
    ~ Call CntMartWea
    ~ if (CntMartWea >= 3) then
    ~    @valid = 1
    ~ else
    ~    @valid = 0
    ~ endif

    var s2search as string
    var X as number
    var CntMartWea as number
    CntMartWea = 0
    X = 0

    ~ Loop through all racial Weapon Familiarity things
    ~ that are not replaced/disabled
    foreach pick in hero where "Helper.WeaponFam & !Helper.SpcReplace"
       ~ only do anything if we have actually Weapon Proficiencies
       if (each.tagis[WepProf.?] <> 0) then
          ~ if loop counter not zero then add a seperator between strings
          if ( X <> 0) then
             ~ add a seperator between each loop
             s2search &= "|"
          endif
          ~ Build a search sting of all weapon tags
          s2search &= eachpick.tagids[WepProf.?,"|"]
          ~ increment loop counter
          X += 1
       endif
    nexteach

    X = 0
    ~ Find the dieity selected to pull its WepProf tags
    foreach pick in hero where "component.Deity"
       ~ only do anything if we have actually Weapon Proficiencies
       if (each.tagis[WepProf.?] <> 0) then
          ~ if loop counter not zero then add a seperator between strings
          if ( X <> 0) then
             ~ add a seperator between each loop
             s2search &= "|"
          endif
          ~ If not empty search then we had found weapons so add a seperator between
          ~ weapons and diety search string
          if ( empty(s2search) = 0) then
             ~ add a seperator between each loop
             s2search &= "|"
          endif
          ~ Build a search sting of all weapon tags
          s2search &= eachpick.tagids[WepProf.?,"|"]
          ~ increment loop counter
          X += 1
       endif
    nexteach

    ~ Count number of martial weapons we are proficient with
    foreach thing in BaseWep where s2search
       if (eachthing.tagis[wProfReq.Martial] <> 0) then
         CntMartWea += 1
       endif
    nexteach
    ]]>
  </procedure>

  <procedure id="X1HaveMate" scripttype="validate"><![CDATA[
    ~ This procedure tests if suite of armor already has a specific type of material
    var X1HaveMate as number
    X1HaveMate = 0

    ~ If not a pick then we are valid
    if (@ispick <> 1) then
      X1HaveMate = 1
    endif

    ~ If we are a not a custom armor we are valid
    if (tagis[portal.mMagChoose] <> 1) then
      X1HaveMate = 1
    endif
    ~ We can't have any other special material
    if (tagcount[Ability.e?] - tagcount[Ability.eNormal] = 1) then
      X1HaveMate = 1
    endif
    ]]>
  </procedure>

</document>